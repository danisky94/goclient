/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Notificacao struct for Notificacao
type Notificacao struct {
	Id *int64 `json:"id,omitempty"`
	Deleted *int32 `json:"deleted,omitempty"`
	Upd NullableTime `json:"upd,omitempty"`
	Usr NullableInt64 `json:"usr,omitempty"`
	Data NullableTime `json:"data,omitempty"`
	Tipo *NotificacaoTipo `json:"tipo,omitempty"`
	Assunto NullableString `json:"assunto,omitempty"`
	Mensagem NullableString `json:"mensagem,omitempty"`
	Estado *EstadoNotificacao `json:"estado,omitempty"`
	NoticacaoUtilizadors []NotificacaoUtilizador `json:"noticacaoUtilizadors,omitempty"`
}

// NewNotificacao instantiates a new Notificacao object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificacao() *Notificacao {
	this := Notificacao{}
	return &this
}

// NewNotificacaoWithDefaults instantiates a new Notificacao object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificacaoWithDefaults() *Notificacao {
	this := Notificacao{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Notificacao) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notificacao) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Notificacao) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Notificacao) SetId(v int64) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Notificacao) GetDeleted() int32 {
	if o == nil || o.Deleted == nil {
		var ret int32
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notificacao) GetDeletedOk() (*int32, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Notificacao) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int32 and assigns it to the Deleted field.
func (o *Notificacao) SetDeleted(v int32) {
	o.Deleted = &v
}

// GetUpd returns the Upd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notificacao) GetUpd() time.Time {
	if o == nil || o.Upd.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Upd.Get()
}

// GetUpdOk returns a tuple with the Upd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notificacao) GetUpdOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Upd.Get(), o.Upd.IsSet()
}

// HasUpd returns a boolean if a field has been set.
func (o *Notificacao) HasUpd() bool {
	if o != nil && o.Upd.IsSet() {
		return true
	}

	return false
}

// SetUpd gets a reference to the given NullableTime and assigns it to the Upd field.
func (o *Notificacao) SetUpd(v time.Time) {
	o.Upd.Set(&v)
}
// SetUpdNil sets the value for Upd to be an explicit nil
func (o *Notificacao) SetUpdNil() {
	o.Upd.Set(nil)
}

// UnsetUpd ensures that no value is present for Upd, not even an explicit nil
func (o *Notificacao) UnsetUpd() {
	o.Upd.Unset()
}

// GetUsr returns the Usr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notificacao) GetUsr() int64 {
	if o == nil || o.Usr.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Usr.Get()
}

// GetUsrOk returns a tuple with the Usr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notificacao) GetUsrOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Usr.Get(), o.Usr.IsSet()
}

// HasUsr returns a boolean if a field has been set.
func (o *Notificacao) HasUsr() bool {
	if o != nil && o.Usr.IsSet() {
		return true
	}

	return false
}

// SetUsr gets a reference to the given NullableInt64 and assigns it to the Usr field.
func (o *Notificacao) SetUsr(v int64) {
	o.Usr.Set(&v)
}
// SetUsrNil sets the value for Usr to be an explicit nil
func (o *Notificacao) SetUsrNil() {
	o.Usr.Set(nil)
}

// UnsetUsr ensures that no value is present for Usr, not even an explicit nil
func (o *Notificacao) UnsetUsr() {
	o.Usr.Unset()
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notificacao) GetData() time.Time {
	if o == nil || o.Data.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Data.Get()
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notificacao) GetDataOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Data.Get(), o.Data.IsSet()
}

// HasData returns a boolean if a field has been set.
func (o *Notificacao) HasData() bool {
	if o != nil && o.Data.IsSet() {
		return true
	}

	return false
}

// SetData gets a reference to the given NullableTime and assigns it to the Data field.
func (o *Notificacao) SetData(v time.Time) {
	o.Data.Set(&v)
}
// SetDataNil sets the value for Data to be an explicit nil
func (o *Notificacao) SetDataNil() {
	o.Data.Set(nil)
}

// UnsetData ensures that no value is present for Data, not even an explicit nil
func (o *Notificacao) UnsetData() {
	o.Data.Unset()
}

// GetTipo returns the Tipo field value if set, zero value otherwise.
func (o *Notificacao) GetTipo() NotificacaoTipo {
	if o == nil || o.Tipo == nil {
		var ret NotificacaoTipo
		return ret
	}
	return *o.Tipo
}

// GetTipoOk returns a tuple with the Tipo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notificacao) GetTipoOk() (*NotificacaoTipo, bool) {
	if o == nil || o.Tipo == nil {
		return nil, false
	}
	return o.Tipo, true
}

// HasTipo returns a boolean if a field has been set.
func (o *Notificacao) HasTipo() bool {
	if o != nil && o.Tipo != nil {
		return true
	}

	return false
}

// SetTipo gets a reference to the given NotificacaoTipo and assigns it to the Tipo field.
func (o *Notificacao) SetTipo(v NotificacaoTipo) {
	o.Tipo = &v
}

// GetAssunto returns the Assunto field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notificacao) GetAssunto() string {
	if o == nil || o.Assunto.Get() == nil {
		var ret string
		return ret
	}
	return *o.Assunto.Get()
}

// GetAssuntoOk returns a tuple with the Assunto field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notificacao) GetAssuntoOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Assunto.Get(), o.Assunto.IsSet()
}

// HasAssunto returns a boolean if a field has been set.
func (o *Notificacao) HasAssunto() bool {
	if o != nil && o.Assunto.IsSet() {
		return true
	}

	return false
}

// SetAssunto gets a reference to the given NullableString and assigns it to the Assunto field.
func (o *Notificacao) SetAssunto(v string) {
	o.Assunto.Set(&v)
}
// SetAssuntoNil sets the value for Assunto to be an explicit nil
func (o *Notificacao) SetAssuntoNil() {
	o.Assunto.Set(nil)
}

// UnsetAssunto ensures that no value is present for Assunto, not even an explicit nil
func (o *Notificacao) UnsetAssunto() {
	o.Assunto.Unset()
}

// GetMensagem returns the Mensagem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notificacao) GetMensagem() string {
	if o == nil || o.Mensagem.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mensagem.Get()
}

// GetMensagemOk returns a tuple with the Mensagem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notificacao) GetMensagemOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mensagem.Get(), o.Mensagem.IsSet()
}

// HasMensagem returns a boolean if a field has been set.
func (o *Notificacao) HasMensagem() bool {
	if o != nil && o.Mensagem.IsSet() {
		return true
	}

	return false
}

// SetMensagem gets a reference to the given NullableString and assigns it to the Mensagem field.
func (o *Notificacao) SetMensagem(v string) {
	o.Mensagem.Set(&v)
}
// SetMensagemNil sets the value for Mensagem to be an explicit nil
func (o *Notificacao) SetMensagemNil() {
	o.Mensagem.Set(nil)
}

// UnsetMensagem ensures that no value is present for Mensagem, not even an explicit nil
func (o *Notificacao) UnsetMensagem() {
	o.Mensagem.Unset()
}

// GetEstado returns the Estado field value if set, zero value otherwise.
func (o *Notificacao) GetEstado() EstadoNotificacao {
	if o == nil || o.Estado == nil {
		var ret EstadoNotificacao
		return ret
	}
	return *o.Estado
}

// GetEstadoOk returns a tuple with the Estado field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notificacao) GetEstadoOk() (*EstadoNotificacao, bool) {
	if o == nil || o.Estado == nil {
		return nil, false
	}
	return o.Estado, true
}

// HasEstado returns a boolean if a field has been set.
func (o *Notificacao) HasEstado() bool {
	if o != nil && o.Estado != nil {
		return true
	}

	return false
}

// SetEstado gets a reference to the given EstadoNotificacao and assigns it to the Estado field.
func (o *Notificacao) SetEstado(v EstadoNotificacao) {
	o.Estado = &v
}

// GetNoticacaoUtilizadors returns the NoticacaoUtilizadors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notificacao) GetNoticacaoUtilizadors() []NotificacaoUtilizador {
	if o == nil  {
		var ret []NotificacaoUtilizador
		return ret
	}
	return o.NoticacaoUtilizadors
}

// GetNoticacaoUtilizadorsOk returns a tuple with the NoticacaoUtilizadors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notificacao) GetNoticacaoUtilizadorsOk() (*[]NotificacaoUtilizador, bool) {
	if o == nil || o.NoticacaoUtilizadors == nil {
		return nil, false
	}
	return &o.NoticacaoUtilizadors, true
}

// HasNoticacaoUtilizadors returns a boolean if a field has been set.
func (o *Notificacao) HasNoticacaoUtilizadors() bool {
	if o != nil && o.NoticacaoUtilizadors != nil {
		return true
	}

	return false
}

// SetNoticacaoUtilizadors gets a reference to the given []NotificacaoUtilizador and assigns it to the NoticacaoUtilizadors field.
func (o *Notificacao) SetNoticacaoUtilizadors(v []NotificacaoUtilizador) {
	o.NoticacaoUtilizadors = v
}

func (o Notificacao) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Upd.IsSet() {
		toSerialize["upd"] = o.Upd.Get()
	}
	if o.Usr.IsSet() {
		toSerialize["usr"] = o.Usr.Get()
	}
	if o.Data.IsSet() {
		toSerialize["data"] = o.Data.Get()
	}
	if o.Tipo != nil {
		toSerialize["tipo"] = o.Tipo
	}
	if o.Assunto.IsSet() {
		toSerialize["assunto"] = o.Assunto.Get()
	}
	if o.Mensagem.IsSet() {
		toSerialize["mensagem"] = o.Mensagem.Get()
	}
	if o.Estado != nil {
		toSerialize["estado"] = o.Estado
	}
	if o.NoticacaoUtilizadors != nil {
		toSerialize["noticacaoUtilizadors"] = o.NoticacaoUtilizadors
	}
	return json.Marshal(toSerialize)
}

type NullableNotificacao struct {
	value *Notificacao
	isSet bool
}

func (v NullableNotificacao) Get() *Notificacao {
	return v.value
}

func (v *NullableNotificacao) Set(val *Notificacao) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificacao) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificacao) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificacao(val *Notificacao) *NullableNotificacao {
	return &NullableNotificacao{value: val, isSet: true}
}

func (v NullableNotificacao) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificacao) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


