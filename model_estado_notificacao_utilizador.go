/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EstadoNotificacaoUtilizador the model 'EstadoNotificacaoUtilizador'
type EstadoNotificacaoUtilizador int32


var allowedEstadoNotificacaoUtilizadorEnumValues = []EstadoNotificacaoUtilizador{
	0,
	1,
	2,
}

func (v *EstadoNotificacaoUtilizador) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EstadoNotificacaoUtilizador(value)
	for _, existing := range allowedEstadoNotificacaoUtilizadorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EstadoNotificacaoUtilizador", value)
}

// NewEstadoNotificacaoUtilizadorFromValue returns a pointer to a valid EstadoNotificacaoUtilizador
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEstadoNotificacaoUtilizadorFromValue(v int32) (*EstadoNotificacaoUtilizador, error) {
	ev := EstadoNotificacaoUtilizador(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EstadoNotificacaoUtilizador: valid values are %v", v, allowedEstadoNotificacaoUtilizadorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EstadoNotificacaoUtilizador) IsValid() bool {
	for _, existing := range allowedEstadoNotificacaoUtilizadorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EstadoNotificacaoUtilizador value
func (v EstadoNotificacaoUtilizador) Ptr() *EstadoNotificacaoUtilizador {
	return &v
}

type NullableEstadoNotificacaoUtilizador struct {
	value *EstadoNotificacaoUtilizador
	isSet bool
}

func (v NullableEstadoNotificacaoUtilizador) Get() *EstadoNotificacaoUtilizador {
	return v.value
}

func (v *NullableEstadoNotificacaoUtilizador) Set(val *EstadoNotificacaoUtilizador) {
	v.value = val
	v.isSet = true
}

func (v NullableEstadoNotificacaoUtilizador) IsSet() bool {
	return v.isSet
}

func (v *NullableEstadoNotificacaoUtilizador) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstadoNotificacaoUtilizador(val *EstadoNotificacaoUtilizador) *NullableEstadoNotificacaoUtilizador {
	return &NullableEstadoNotificacaoUtilizador{value: val, isSet: true}
}

func (v NullableEstadoNotificacaoUtilizador) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstadoNotificacaoUtilizador) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

