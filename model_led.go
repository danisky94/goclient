/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Led struct for Led
type Led struct {
	Id *int64 `json:"id,omitempty"`
	Deleted *int32 `json:"deleted,omitempty"`
	Upd NullableTime `json:"upd,omitempty"`
	Usr NullableInt64 `json:"usr,omitempty"`
	Address NullableString `json:"address,omitempty"`
	Channel NullableInt32 `json:"channel,omitempty"`
	Start NullableInt32 `json:"start,omitempty"`
	End NullableInt32 `json:"end,omitempty"`
	RefCompartimento NullableInt64 `json:"refCompartimento,omitempty"`
	Compartimento *Compartimento `json:"compartimento,omitempty"`
}

// NewLed instantiates a new Led object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLed() *Led {
	this := Led{}
	return &this
}

// NewLedWithDefaults instantiates a new Led object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLedWithDefaults() *Led {
	this := Led{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Led) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Led) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Led) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Led) SetId(v int64) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Led) GetDeleted() int32 {
	if o == nil || o.Deleted == nil {
		var ret int32
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Led) GetDeletedOk() (*int32, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Led) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int32 and assigns it to the Deleted field.
func (o *Led) SetDeleted(v int32) {
	o.Deleted = &v
}

// GetUpd returns the Upd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Led) GetUpd() time.Time {
	if o == nil || o.Upd.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Upd.Get()
}

// GetUpdOk returns a tuple with the Upd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Led) GetUpdOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Upd.Get(), o.Upd.IsSet()
}

// HasUpd returns a boolean if a field has been set.
func (o *Led) HasUpd() bool {
	if o != nil && o.Upd.IsSet() {
		return true
	}

	return false
}

// SetUpd gets a reference to the given NullableTime and assigns it to the Upd field.
func (o *Led) SetUpd(v time.Time) {
	o.Upd.Set(&v)
}
// SetUpdNil sets the value for Upd to be an explicit nil
func (o *Led) SetUpdNil() {
	o.Upd.Set(nil)
}

// UnsetUpd ensures that no value is present for Upd, not even an explicit nil
func (o *Led) UnsetUpd() {
	o.Upd.Unset()
}

// GetUsr returns the Usr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Led) GetUsr() int64 {
	if o == nil || o.Usr.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Usr.Get()
}

// GetUsrOk returns a tuple with the Usr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Led) GetUsrOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Usr.Get(), o.Usr.IsSet()
}

// HasUsr returns a boolean if a field has been set.
func (o *Led) HasUsr() bool {
	if o != nil && o.Usr.IsSet() {
		return true
	}

	return false
}

// SetUsr gets a reference to the given NullableInt64 and assigns it to the Usr field.
func (o *Led) SetUsr(v int64) {
	o.Usr.Set(&v)
}
// SetUsrNil sets the value for Usr to be an explicit nil
func (o *Led) SetUsrNil() {
	o.Usr.Set(nil)
}

// UnsetUsr ensures that no value is present for Usr, not even an explicit nil
func (o *Led) UnsetUsr() {
	o.Usr.Unset()
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Led) GetAddress() string {
	if o == nil || o.Address.Get() == nil {
		var ret string
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Led) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *Led) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableString and assigns it to the Address field.
func (o *Led) SetAddress(v string) {
	o.Address.Set(&v)
}
// SetAddressNil sets the value for Address to be an explicit nil
func (o *Led) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *Led) UnsetAddress() {
	o.Address.Unset()
}

// GetChannel returns the Channel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Led) GetChannel() int32 {
	if o == nil || o.Channel.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Channel.Get()
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Led) GetChannelOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Channel.Get(), o.Channel.IsSet()
}

// HasChannel returns a boolean if a field has been set.
func (o *Led) HasChannel() bool {
	if o != nil && o.Channel.IsSet() {
		return true
	}

	return false
}

// SetChannel gets a reference to the given NullableInt32 and assigns it to the Channel field.
func (o *Led) SetChannel(v int32) {
	o.Channel.Set(&v)
}
// SetChannelNil sets the value for Channel to be an explicit nil
func (o *Led) SetChannelNil() {
	o.Channel.Set(nil)
}

// UnsetChannel ensures that no value is present for Channel, not even an explicit nil
func (o *Led) UnsetChannel() {
	o.Channel.Unset()
}

// GetStart returns the Start field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Led) GetStart() int32 {
	if o == nil || o.Start.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Start.Get()
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Led) GetStartOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Start.Get(), o.Start.IsSet()
}

// HasStart returns a boolean if a field has been set.
func (o *Led) HasStart() bool {
	if o != nil && o.Start.IsSet() {
		return true
	}

	return false
}

// SetStart gets a reference to the given NullableInt32 and assigns it to the Start field.
func (o *Led) SetStart(v int32) {
	o.Start.Set(&v)
}
// SetStartNil sets the value for Start to be an explicit nil
func (o *Led) SetStartNil() {
	o.Start.Set(nil)
}

// UnsetStart ensures that no value is present for Start, not even an explicit nil
func (o *Led) UnsetStart() {
	o.Start.Unset()
}

// GetEnd returns the End field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Led) GetEnd() int32 {
	if o == nil || o.End.Get() == nil {
		var ret int32
		return ret
	}
	return *o.End.Get()
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Led) GetEndOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.End.Get(), o.End.IsSet()
}

// HasEnd returns a boolean if a field has been set.
func (o *Led) HasEnd() bool {
	if o != nil && o.End.IsSet() {
		return true
	}

	return false
}

// SetEnd gets a reference to the given NullableInt32 and assigns it to the End field.
func (o *Led) SetEnd(v int32) {
	o.End.Set(&v)
}
// SetEndNil sets the value for End to be an explicit nil
func (o *Led) SetEndNil() {
	o.End.Set(nil)
}

// UnsetEnd ensures that no value is present for End, not even an explicit nil
func (o *Led) UnsetEnd() {
	o.End.Unset()
}

// GetRefCompartimento returns the RefCompartimento field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Led) GetRefCompartimento() int64 {
	if o == nil || o.RefCompartimento.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefCompartimento.Get()
}

// GetRefCompartimentoOk returns a tuple with the RefCompartimento field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Led) GetRefCompartimentoOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefCompartimento.Get(), o.RefCompartimento.IsSet()
}

// HasRefCompartimento returns a boolean if a field has been set.
func (o *Led) HasRefCompartimento() bool {
	if o != nil && o.RefCompartimento.IsSet() {
		return true
	}

	return false
}

// SetRefCompartimento gets a reference to the given NullableInt64 and assigns it to the RefCompartimento field.
func (o *Led) SetRefCompartimento(v int64) {
	o.RefCompartimento.Set(&v)
}
// SetRefCompartimentoNil sets the value for RefCompartimento to be an explicit nil
func (o *Led) SetRefCompartimentoNil() {
	o.RefCompartimento.Set(nil)
}

// UnsetRefCompartimento ensures that no value is present for RefCompartimento, not even an explicit nil
func (o *Led) UnsetRefCompartimento() {
	o.RefCompartimento.Unset()
}

// GetCompartimento returns the Compartimento field value if set, zero value otherwise.
func (o *Led) GetCompartimento() Compartimento {
	if o == nil || o.Compartimento == nil {
		var ret Compartimento
		return ret
	}
	return *o.Compartimento
}

// GetCompartimentoOk returns a tuple with the Compartimento field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Led) GetCompartimentoOk() (*Compartimento, bool) {
	if o == nil || o.Compartimento == nil {
		return nil, false
	}
	return o.Compartimento, true
}

// HasCompartimento returns a boolean if a field has been set.
func (o *Led) HasCompartimento() bool {
	if o != nil && o.Compartimento != nil {
		return true
	}

	return false
}

// SetCompartimento gets a reference to the given Compartimento and assigns it to the Compartimento field.
func (o *Led) SetCompartimento(v Compartimento) {
	o.Compartimento = &v
}

func (o Led) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Upd.IsSet() {
		toSerialize["upd"] = o.Upd.Get()
	}
	if o.Usr.IsSet() {
		toSerialize["usr"] = o.Usr.Get()
	}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if o.Channel.IsSet() {
		toSerialize["channel"] = o.Channel.Get()
	}
	if o.Start.IsSet() {
		toSerialize["start"] = o.Start.Get()
	}
	if o.End.IsSet() {
		toSerialize["end"] = o.End.Get()
	}
	if o.RefCompartimento.IsSet() {
		toSerialize["refCompartimento"] = o.RefCompartimento.Get()
	}
	if o.Compartimento != nil {
		toSerialize["compartimento"] = o.Compartimento
	}
	return json.Marshal(toSerialize)
}

type NullableLed struct {
	value *Led
	isSet bool
}

func (v NullableLed) Get() *Led {
	return v.value
}

func (v *NullableLed) Set(val *Led) {
	v.value = val
	v.isSet = true
}

func (v NullableLed) IsSet() bool {
	return v.isSet
}

func (v *NullableLed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLed(val *Led) *NullableLed {
	return &NullableLed{value: val, isSet: true}
}

func (v NullableLed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


