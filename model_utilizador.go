/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Utilizador struct for Utilizador
type Utilizador struct {
	Id *int64 `json:"id,omitempty"`
	Deleted *int32 `json:"deleted,omitempty"`
	Upd NullableTime `json:"upd,omitempty"`
	Usr NullableInt64 `json:"usr,omitempty"`
	Nome NullableString `json:"nome,omitempty"`
	Email NullableString `json:"email,omitempty"`
	Telemovel NullableString `json:"telemovel,omitempty"`
	RefEntidade NullableInt64 `json:"refEntidade,omitempty"`
	Tipo *TipoUtilizador `json:"tipo,omitempty"`
	Password NullableString `json:"password,omitempty"`
	Salt NullableString `json:"salt,omitempty"`
	Estado *UtilizadorEstados `json:"estado,omitempty"`
	RefEntidadeNavigation *Entidade `json:"refEntidadeNavigation,omitempty"`
	Intervencaos []Intervencao `json:"intervencaos,omitempty"`
	NoticacaoUtilizadors []NotificacaoUtilizador `json:"noticacaoUtilizadors,omitempty"`
	Tarefas []Tarefa `json:"tarefas,omitempty"`
	TipoNotificacaoUtilizadors []TipoNotificacaoUtilizador `json:"tipoNotificacaoUtilizadors,omitempty"`
	UtilizadorPerfilSegurancas []UtilizadorPerfilSeguranca `json:"utilizadorPerfilSegurancas,omitempty"`
	OrdensServico []OrdemServico `json:"ordensServico,omitempty"`
}

// NewUtilizador instantiates a new Utilizador object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilizador() *Utilizador {
	this := Utilizador{}
	return &this
}

// NewUtilizadorWithDefaults instantiates a new Utilizador object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilizadorWithDefaults() *Utilizador {
	this := Utilizador{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Utilizador) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Utilizador) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Utilizador) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Utilizador) SetId(v int64) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Utilizador) GetDeleted() int32 {
	if o == nil || o.Deleted == nil {
		var ret int32
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Utilizador) GetDeletedOk() (*int32, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Utilizador) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int32 and assigns it to the Deleted field.
func (o *Utilizador) SetDeleted(v int32) {
	o.Deleted = &v
}

// GetUpd returns the Upd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetUpd() time.Time {
	if o == nil || o.Upd.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Upd.Get()
}

// GetUpdOk returns a tuple with the Upd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetUpdOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Upd.Get(), o.Upd.IsSet()
}

// HasUpd returns a boolean if a field has been set.
func (o *Utilizador) HasUpd() bool {
	if o != nil && o.Upd.IsSet() {
		return true
	}

	return false
}

// SetUpd gets a reference to the given NullableTime and assigns it to the Upd field.
func (o *Utilizador) SetUpd(v time.Time) {
	o.Upd.Set(&v)
}
// SetUpdNil sets the value for Upd to be an explicit nil
func (o *Utilizador) SetUpdNil() {
	o.Upd.Set(nil)
}

// UnsetUpd ensures that no value is present for Upd, not even an explicit nil
func (o *Utilizador) UnsetUpd() {
	o.Upd.Unset()
}

// GetUsr returns the Usr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetUsr() int64 {
	if o == nil || o.Usr.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Usr.Get()
}

// GetUsrOk returns a tuple with the Usr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetUsrOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Usr.Get(), o.Usr.IsSet()
}

// HasUsr returns a boolean if a field has been set.
func (o *Utilizador) HasUsr() bool {
	if o != nil && o.Usr.IsSet() {
		return true
	}

	return false
}

// SetUsr gets a reference to the given NullableInt64 and assigns it to the Usr field.
func (o *Utilizador) SetUsr(v int64) {
	o.Usr.Set(&v)
}
// SetUsrNil sets the value for Usr to be an explicit nil
func (o *Utilizador) SetUsrNil() {
	o.Usr.Set(nil)
}

// UnsetUsr ensures that no value is present for Usr, not even an explicit nil
func (o *Utilizador) UnsetUsr() {
	o.Usr.Unset()
}

// GetNome returns the Nome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetNome() string {
	if o == nil || o.Nome.Get() == nil {
		var ret string
		return ret
	}
	return *o.Nome.Get()
}

// GetNomeOk returns a tuple with the Nome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetNomeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Nome.Get(), o.Nome.IsSet()
}

// HasNome returns a boolean if a field has been set.
func (o *Utilizador) HasNome() bool {
	if o != nil && o.Nome.IsSet() {
		return true
	}

	return false
}

// SetNome gets a reference to the given NullableString and assigns it to the Nome field.
func (o *Utilizador) SetNome(v string) {
	o.Nome.Set(&v)
}
// SetNomeNil sets the value for Nome to be an explicit nil
func (o *Utilizador) SetNomeNil() {
	o.Nome.Set(nil)
}

// UnsetNome ensures that no value is present for Nome, not even an explicit nil
func (o *Utilizador) UnsetNome() {
	o.Nome.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetEmail() string {
	if o == nil || o.Email.Get() == nil {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *Utilizador) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *Utilizador) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *Utilizador) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *Utilizador) UnsetEmail() {
	o.Email.Unset()
}

// GetTelemovel returns the Telemovel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetTelemovel() string {
	if o == nil || o.Telemovel.Get() == nil {
		var ret string
		return ret
	}
	return *o.Telemovel.Get()
}

// GetTelemovelOk returns a tuple with the Telemovel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetTelemovelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Telemovel.Get(), o.Telemovel.IsSet()
}

// HasTelemovel returns a boolean if a field has been set.
func (o *Utilizador) HasTelemovel() bool {
	if o != nil && o.Telemovel.IsSet() {
		return true
	}

	return false
}

// SetTelemovel gets a reference to the given NullableString and assigns it to the Telemovel field.
func (o *Utilizador) SetTelemovel(v string) {
	o.Telemovel.Set(&v)
}
// SetTelemovelNil sets the value for Telemovel to be an explicit nil
func (o *Utilizador) SetTelemovelNil() {
	o.Telemovel.Set(nil)
}

// UnsetTelemovel ensures that no value is present for Telemovel, not even an explicit nil
func (o *Utilizador) UnsetTelemovel() {
	o.Telemovel.Unset()
}

// GetRefEntidade returns the RefEntidade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetRefEntidade() int64 {
	if o == nil || o.RefEntidade.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefEntidade.Get()
}

// GetRefEntidadeOk returns a tuple with the RefEntidade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetRefEntidadeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefEntidade.Get(), o.RefEntidade.IsSet()
}

// HasRefEntidade returns a boolean if a field has been set.
func (o *Utilizador) HasRefEntidade() bool {
	if o != nil && o.RefEntidade.IsSet() {
		return true
	}

	return false
}

// SetRefEntidade gets a reference to the given NullableInt64 and assigns it to the RefEntidade field.
func (o *Utilizador) SetRefEntidade(v int64) {
	o.RefEntidade.Set(&v)
}
// SetRefEntidadeNil sets the value for RefEntidade to be an explicit nil
func (o *Utilizador) SetRefEntidadeNil() {
	o.RefEntidade.Set(nil)
}

// UnsetRefEntidade ensures that no value is present for RefEntidade, not even an explicit nil
func (o *Utilizador) UnsetRefEntidade() {
	o.RefEntidade.Unset()
}

// GetTipo returns the Tipo field value if set, zero value otherwise.
func (o *Utilizador) GetTipo() TipoUtilizador {
	if o == nil || o.Tipo == nil {
		var ret TipoUtilizador
		return ret
	}
	return *o.Tipo
}

// GetTipoOk returns a tuple with the Tipo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Utilizador) GetTipoOk() (*TipoUtilizador, bool) {
	if o == nil || o.Tipo == nil {
		return nil, false
	}
	return o.Tipo, true
}

// HasTipo returns a boolean if a field has been set.
func (o *Utilizador) HasTipo() bool {
	if o != nil && o.Tipo != nil {
		return true
	}

	return false
}

// SetTipo gets a reference to the given TipoUtilizador and assigns it to the Tipo field.
func (o *Utilizador) SetTipo(v TipoUtilizador) {
	o.Tipo = &v
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *Utilizador) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *Utilizador) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *Utilizador) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *Utilizador) UnsetPassword() {
	o.Password.Unset()
}

// GetSalt returns the Salt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetSalt() string {
	if o == nil || o.Salt.Get() == nil {
		var ret string
		return ret
	}
	return *o.Salt.Get()
}

// GetSaltOk returns a tuple with the Salt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetSaltOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Salt.Get(), o.Salt.IsSet()
}

// HasSalt returns a boolean if a field has been set.
func (o *Utilizador) HasSalt() bool {
	if o != nil && o.Salt.IsSet() {
		return true
	}

	return false
}

// SetSalt gets a reference to the given NullableString and assigns it to the Salt field.
func (o *Utilizador) SetSalt(v string) {
	o.Salt.Set(&v)
}
// SetSaltNil sets the value for Salt to be an explicit nil
func (o *Utilizador) SetSaltNil() {
	o.Salt.Set(nil)
}

// UnsetSalt ensures that no value is present for Salt, not even an explicit nil
func (o *Utilizador) UnsetSalt() {
	o.Salt.Unset()
}

// GetEstado returns the Estado field value if set, zero value otherwise.
func (o *Utilizador) GetEstado() UtilizadorEstados {
	if o == nil || o.Estado == nil {
		var ret UtilizadorEstados
		return ret
	}
	return *o.Estado
}

// GetEstadoOk returns a tuple with the Estado field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Utilizador) GetEstadoOk() (*UtilizadorEstados, bool) {
	if o == nil || o.Estado == nil {
		return nil, false
	}
	return o.Estado, true
}

// HasEstado returns a boolean if a field has been set.
func (o *Utilizador) HasEstado() bool {
	if o != nil && o.Estado != nil {
		return true
	}

	return false
}

// SetEstado gets a reference to the given UtilizadorEstados and assigns it to the Estado field.
func (o *Utilizador) SetEstado(v UtilizadorEstados) {
	o.Estado = &v
}

// GetRefEntidadeNavigation returns the RefEntidadeNavigation field value if set, zero value otherwise.
func (o *Utilizador) GetRefEntidadeNavigation() Entidade {
	if o == nil || o.RefEntidadeNavigation == nil {
		var ret Entidade
		return ret
	}
	return *o.RefEntidadeNavigation
}

// GetRefEntidadeNavigationOk returns a tuple with the RefEntidadeNavigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Utilizador) GetRefEntidadeNavigationOk() (*Entidade, bool) {
	if o == nil || o.RefEntidadeNavigation == nil {
		return nil, false
	}
	return o.RefEntidadeNavigation, true
}

// HasRefEntidadeNavigation returns a boolean if a field has been set.
func (o *Utilizador) HasRefEntidadeNavigation() bool {
	if o != nil && o.RefEntidadeNavigation != nil {
		return true
	}

	return false
}

// SetRefEntidadeNavigation gets a reference to the given Entidade and assigns it to the RefEntidadeNavigation field.
func (o *Utilizador) SetRefEntidadeNavigation(v Entidade) {
	o.RefEntidadeNavigation = &v
}

// GetIntervencaos returns the Intervencaos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetIntervencaos() []Intervencao {
	if o == nil  {
		var ret []Intervencao
		return ret
	}
	return o.Intervencaos
}

// GetIntervencaosOk returns a tuple with the Intervencaos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetIntervencaosOk() (*[]Intervencao, bool) {
	if o == nil || o.Intervencaos == nil {
		return nil, false
	}
	return &o.Intervencaos, true
}

// HasIntervencaos returns a boolean if a field has been set.
func (o *Utilizador) HasIntervencaos() bool {
	if o != nil && o.Intervencaos != nil {
		return true
	}

	return false
}

// SetIntervencaos gets a reference to the given []Intervencao and assigns it to the Intervencaos field.
func (o *Utilizador) SetIntervencaos(v []Intervencao) {
	o.Intervencaos = v
}

// GetNoticacaoUtilizadors returns the NoticacaoUtilizadors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetNoticacaoUtilizadors() []NotificacaoUtilizador {
	if o == nil  {
		var ret []NotificacaoUtilizador
		return ret
	}
	return o.NoticacaoUtilizadors
}

// GetNoticacaoUtilizadorsOk returns a tuple with the NoticacaoUtilizadors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetNoticacaoUtilizadorsOk() (*[]NotificacaoUtilizador, bool) {
	if o == nil || o.NoticacaoUtilizadors == nil {
		return nil, false
	}
	return &o.NoticacaoUtilizadors, true
}

// HasNoticacaoUtilizadors returns a boolean if a field has been set.
func (o *Utilizador) HasNoticacaoUtilizadors() bool {
	if o != nil && o.NoticacaoUtilizadors != nil {
		return true
	}

	return false
}

// SetNoticacaoUtilizadors gets a reference to the given []NotificacaoUtilizador and assigns it to the NoticacaoUtilizadors field.
func (o *Utilizador) SetNoticacaoUtilizadors(v []NotificacaoUtilizador) {
	o.NoticacaoUtilizadors = v
}

// GetTarefas returns the Tarefas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetTarefas() []Tarefa {
	if o == nil  {
		var ret []Tarefa
		return ret
	}
	return o.Tarefas
}

// GetTarefasOk returns a tuple with the Tarefas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetTarefasOk() (*[]Tarefa, bool) {
	if o == nil || o.Tarefas == nil {
		return nil, false
	}
	return &o.Tarefas, true
}

// HasTarefas returns a boolean if a field has been set.
func (o *Utilizador) HasTarefas() bool {
	if o != nil && o.Tarefas != nil {
		return true
	}

	return false
}

// SetTarefas gets a reference to the given []Tarefa and assigns it to the Tarefas field.
func (o *Utilizador) SetTarefas(v []Tarefa) {
	o.Tarefas = v
}

// GetTipoNotificacaoUtilizadors returns the TipoNotificacaoUtilizadors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetTipoNotificacaoUtilizadors() []TipoNotificacaoUtilizador {
	if o == nil  {
		var ret []TipoNotificacaoUtilizador
		return ret
	}
	return o.TipoNotificacaoUtilizadors
}

// GetTipoNotificacaoUtilizadorsOk returns a tuple with the TipoNotificacaoUtilizadors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetTipoNotificacaoUtilizadorsOk() (*[]TipoNotificacaoUtilizador, bool) {
	if o == nil || o.TipoNotificacaoUtilizadors == nil {
		return nil, false
	}
	return &o.TipoNotificacaoUtilizadors, true
}

// HasTipoNotificacaoUtilizadors returns a boolean if a field has been set.
func (o *Utilizador) HasTipoNotificacaoUtilizadors() bool {
	if o != nil && o.TipoNotificacaoUtilizadors != nil {
		return true
	}

	return false
}

// SetTipoNotificacaoUtilizadors gets a reference to the given []TipoNotificacaoUtilizador and assigns it to the TipoNotificacaoUtilizadors field.
func (o *Utilizador) SetTipoNotificacaoUtilizadors(v []TipoNotificacaoUtilizador) {
	o.TipoNotificacaoUtilizadors = v
}

// GetUtilizadorPerfilSegurancas returns the UtilizadorPerfilSegurancas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetUtilizadorPerfilSegurancas() []UtilizadorPerfilSeguranca {
	if o == nil  {
		var ret []UtilizadorPerfilSeguranca
		return ret
	}
	return o.UtilizadorPerfilSegurancas
}

// GetUtilizadorPerfilSegurancasOk returns a tuple with the UtilizadorPerfilSegurancas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetUtilizadorPerfilSegurancasOk() (*[]UtilizadorPerfilSeguranca, bool) {
	if o == nil || o.UtilizadorPerfilSegurancas == nil {
		return nil, false
	}
	return &o.UtilizadorPerfilSegurancas, true
}

// HasUtilizadorPerfilSegurancas returns a boolean if a field has been set.
func (o *Utilizador) HasUtilizadorPerfilSegurancas() bool {
	if o != nil && o.UtilizadorPerfilSegurancas != nil {
		return true
	}

	return false
}

// SetUtilizadorPerfilSegurancas gets a reference to the given []UtilizadorPerfilSeguranca and assigns it to the UtilizadorPerfilSegurancas field.
func (o *Utilizador) SetUtilizadorPerfilSegurancas(v []UtilizadorPerfilSeguranca) {
	o.UtilizadorPerfilSegurancas = v
}

// GetOrdensServico returns the OrdensServico field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Utilizador) GetOrdensServico() []OrdemServico {
	if o == nil  {
		var ret []OrdemServico
		return ret
	}
	return o.OrdensServico
}

// GetOrdensServicoOk returns a tuple with the OrdensServico field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Utilizador) GetOrdensServicoOk() (*[]OrdemServico, bool) {
	if o == nil || o.OrdensServico == nil {
		return nil, false
	}
	return &o.OrdensServico, true
}

// HasOrdensServico returns a boolean if a field has been set.
func (o *Utilizador) HasOrdensServico() bool {
	if o != nil && o.OrdensServico != nil {
		return true
	}

	return false
}

// SetOrdensServico gets a reference to the given []OrdemServico and assigns it to the OrdensServico field.
func (o *Utilizador) SetOrdensServico(v []OrdemServico) {
	o.OrdensServico = v
}

func (o Utilizador) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Upd.IsSet() {
		toSerialize["upd"] = o.Upd.Get()
	}
	if o.Usr.IsSet() {
		toSerialize["usr"] = o.Usr.Get()
	}
	if o.Nome.IsSet() {
		toSerialize["nome"] = o.Nome.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.Telemovel.IsSet() {
		toSerialize["telemovel"] = o.Telemovel.Get()
	}
	if o.RefEntidade.IsSet() {
		toSerialize["refEntidade"] = o.RefEntidade.Get()
	}
	if o.Tipo != nil {
		toSerialize["tipo"] = o.Tipo
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.Salt.IsSet() {
		toSerialize["salt"] = o.Salt.Get()
	}
	if o.Estado != nil {
		toSerialize["estado"] = o.Estado
	}
	if o.RefEntidadeNavigation != nil {
		toSerialize["refEntidadeNavigation"] = o.RefEntidadeNavigation
	}
	if o.Intervencaos != nil {
		toSerialize["intervencaos"] = o.Intervencaos
	}
	if o.NoticacaoUtilizadors != nil {
		toSerialize["noticacaoUtilizadors"] = o.NoticacaoUtilizadors
	}
	if o.Tarefas != nil {
		toSerialize["tarefas"] = o.Tarefas
	}
	if o.TipoNotificacaoUtilizadors != nil {
		toSerialize["tipoNotificacaoUtilizadors"] = o.TipoNotificacaoUtilizadors
	}
	if o.UtilizadorPerfilSegurancas != nil {
		toSerialize["utilizadorPerfilSegurancas"] = o.UtilizadorPerfilSegurancas
	}
	if o.OrdensServico != nil {
		toSerialize["ordensServico"] = o.OrdensServico
	}
	return json.Marshal(toSerialize)
}

type NullableUtilizador struct {
	value *Utilizador
	isSet bool
}

func (v NullableUtilizador) Get() *Utilizador {
	return v.value
}

func (v *NullableUtilizador) Set(val *Utilizador) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilizador) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilizador) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilizador(val *Utilizador) *NullableUtilizador {
	return &NullableUtilizador{value: val, isSet: true}
}

func (v NullableUtilizador) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilizador) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


