/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// NotificacaoUtilizador struct for NotificacaoUtilizador
type NotificacaoUtilizador struct {
	Id *int64 `json:"id,omitempty"`
	Deleted *int32 `json:"deleted,omitempty"`
	Upd NullableTime `json:"upd,omitempty"`
	Usr NullableInt64 `json:"usr,omitempty"`
	RefNotificacao NullableInt64 `json:"refNotificacao,omitempty"`
	RefUtilizador NullableInt64 `json:"refUtilizador,omitempty"`
	DataEnvio NullableTime `json:"dataEnvio,omitempty"`
	Estado *EstadoNotificacaoUtilizador `json:"estado,omitempty"`
	Erro NullableString `json:"erro,omitempty"`
	Notificacao *Notificacao `json:"notificacao,omitempty"`
	Utilizador *Utilizador `json:"utilizador,omitempty"`
}

// NewNotificacaoUtilizador instantiates a new NotificacaoUtilizador object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificacaoUtilizador() *NotificacaoUtilizador {
	this := NotificacaoUtilizador{}
	return &this
}

// NewNotificacaoUtilizadorWithDefaults instantiates a new NotificacaoUtilizador object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificacaoUtilizadorWithDefaults() *NotificacaoUtilizador {
	this := NotificacaoUtilizador{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificacaoUtilizador) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificacaoUtilizador) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificacaoUtilizador) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *NotificacaoUtilizador) SetId(v int64) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *NotificacaoUtilizador) GetDeleted() int32 {
	if o == nil || o.Deleted == nil {
		var ret int32
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificacaoUtilizador) GetDeletedOk() (*int32, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *NotificacaoUtilizador) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int32 and assigns it to the Deleted field.
func (o *NotificacaoUtilizador) SetDeleted(v int32) {
	o.Deleted = &v
}

// GetUpd returns the Upd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificacaoUtilizador) GetUpd() time.Time {
	if o == nil || o.Upd.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Upd.Get()
}

// GetUpdOk returns a tuple with the Upd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificacaoUtilizador) GetUpdOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Upd.Get(), o.Upd.IsSet()
}

// HasUpd returns a boolean if a field has been set.
func (o *NotificacaoUtilizador) HasUpd() bool {
	if o != nil && o.Upd.IsSet() {
		return true
	}

	return false
}

// SetUpd gets a reference to the given NullableTime and assigns it to the Upd field.
func (o *NotificacaoUtilizador) SetUpd(v time.Time) {
	o.Upd.Set(&v)
}
// SetUpdNil sets the value for Upd to be an explicit nil
func (o *NotificacaoUtilizador) SetUpdNil() {
	o.Upd.Set(nil)
}

// UnsetUpd ensures that no value is present for Upd, not even an explicit nil
func (o *NotificacaoUtilizador) UnsetUpd() {
	o.Upd.Unset()
}

// GetUsr returns the Usr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificacaoUtilizador) GetUsr() int64 {
	if o == nil || o.Usr.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Usr.Get()
}

// GetUsrOk returns a tuple with the Usr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificacaoUtilizador) GetUsrOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Usr.Get(), o.Usr.IsSet()
}

// HasUsr returns a boolean if a field has been set.
func (o *NotificacaoUtilizador) HasUsr() bool {
	if o != nil && o.Usr.IsSet() {
		return true
	}

	return false
}

// SetUsr gets a reference to the given NullableInt64 and assigns it to the Usr field.
func (o *NotificacaoUtilizador) SetUsr(v int64) {
	o.Usr.Set(&v)
}
// SetUsrNil sets the value for Usr to be an explicit nil
func (o *NotificacaoUtilizador) SetUsrNil() {
	o.Usr.Set(nil)
}

// UnsetUsr ensures that no value is present for Usr, not even an explicit nil
func (o *NotificacaoUtilizador) UnsetUsr() {
	o.Usr.Unset()
}

// GetRefNotificacao returns the RefNotificacao field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificacaoUtilizador) GetRefNotificacao() int64 {
	if o == nil || o.RefNotificacao.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefNotificacao.Get()
}

// GetRefNotificacaoOk returns a tuple with the RefNotificacao field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificacaoUtilizador) GetRefNotificacaoOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefNotificacao.Get(), o.RefNotificacao.IsSet()
}

// HasRefNotificacao returns a boolean if a field has been set.
func (o *NotificacaoUtilizador) HasRefNotificacao() bool {
	if o != nil && o.RefNotificacao.IsSet() {
		return true
	}

	return false
}

// SetRefNotificacao gets a reference to the given NullableInt64 and assigns it to the RefNotificacao field.
func (o *NotificacaoUtilizador) SetRefNotificacao(v int64) {
	o.RefNotificacao.Set(&v)
}
// SetRefNotificacaoNil sets the value for RefNotificacao to be an explicit nil
func (o *NotificacaoUtilizador) SetRefNotificacaoNil() {
	o.RefNotificacao.Set(nil)
}

// UnsetRefNotificacao ensures that no value is present for RefNotificacao, not even an explicit nil
func (o *NotificacaoUtilizador) UnsetRefNotificacao() {
	o.RefNotificacao.Unset()
}

// GetRefUtilizador returns the RefUtilizador field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificacaoUtilizador) GetRefUtilizador() int64 {
	if o == nil || o.RefUtilizador.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefUtilizador.Get()
}

// GetRefUtilizadorOk returns a tuple with the RefUtilizador field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificacaoUtilizador) GetRefUtilizadorOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefUtilizador.Get(), o.RefUtilizador.IsSet()
}

// HasRefUtilizador returns a boolean if a field has been set.
func (o *NotificacaoUtilizador) HasRefUtilizador() bool {
	if o != nil && o.RefUtilizador.IsSet() {
		return true
	}

	return false
}

// SetRefUtilizador gets a reference to the given NullableInt64 and assigns it to the RefUtilizador field.
func (o *NotificacaoUtilizador) SetRefUtilizador(v int64) {
	o.RefUtilizador.Set(&v)
}
// SetRefUtilizadorNil sets the value for RefUtilizador to be an explicit nil
func (o *NotificacaoUtilizador) SetRefUtilizadorNil() {
	o.RefUtilizador.Set(nil)
}

// UnsetRefUtilizador ensures that no value is present for RefUtilizador, not even an explicit nil
func (o *NotificacaoUtilizador) UnsetRefUtilizador() {
	o.RefUtilizador.Unset()
}

// GetDataEnvio returns the DataEnvio field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificacaoUtilizador) GetDataEnvio() time.Time {
	if o == nil || o.DataEnvio.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DataEnvio.Get()
}

// GetDataEnvioOk returns a tuple with the DataEnvio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificacaoUtilizador) GetDataEnvioOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataEnvio.Get(), o.DataEnvio.IsSet()
}

// HasDataEnvio returns a boolean if a field has been set.
func (o *NotificacaoUtilizador) HasDataEnvio() bool {
	if o != nil && o.DataEnvio.IsSet() {
		return true
	}

	return false
}

// SetDataEnvio gets a reference to the given NullableTime and assigns it to the DataEnvio field.
func (o *NotificacaoUtilizador) SetDataEnvio(v time.Time) {
	o.DataEnvio.Set(&v)
}
// SetDataEnvioNil sets the value for DataEnvio to be an explicit nil
func (o *NotificacaoUtilizador) SetDataEnvioNil() {
	o.DataEnvio.Set(nil)
}

// UnsetDataEnvio ensures that no value is present for DataEnvio, not even an explicit nil
func (o *NotificacaoUtilizador) UnsetDataEnvio() {
	o.DataEnvio.Unset()
}

// GetEstado returns the Estado field value if set, zero value otherwise.
func (o *NotificacaoUtilizador) GetEstado() EstadoNotificacaoUtilizador {
	if o == nil || o.Estado == nil {
		var ret EstadoNotificacaoUtilizador
		return ret
	}
	return *o.Estado
}

// GetEstadoOk returns a tuple with the Estado field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificacaoUtilizador) GetEstadoOk() (*EstadoNotificacaoUtilizador, bool) {
	if o == nil || o.Estado == nil {
		return nil, false
	}
	return o.Estado, true
}

// HasEstado returns a boolean if a field has been set.
func (o *NotificacaoUtilizador) HasEstado() bool {
	if o != nil && o.Estado != nil {
		return true
	}

	return false
}

// SetEstado gets a reference to the given EstadoNotificacaoUtilizador and assigns it to the Estado field.
func (o *NotificacaoUtilizador) SetEstado(v EstadoNotificacaoUtilizador) {
	o.Estado = &v
}

// GetErro returns the Erro field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificacaoUtilizador) GetErro() string {
	if o == nil || o.Erro.Get() == nil {
		var ret string
		return ret
	}
	return *o.Erro.Get()
}

// GetErroOk returns a tuple with the Erro field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificacaoUtilizador) GetErroOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Erro.Get(), o.Erro.IsSet()
}

// HasErro returns a boolean if a field has been set.
func (o *NotificacaoUtilizador) HasErro() bool {
	if o != nil && o.Erro.IsSet() {
		return true
	}

	return false
}

// SetErro gets a reference to the given NullableString and assigns it to the Erro field.
func (o *NotificacaoUtilizador) SetErro(v string) {
	o.Erro.Set(&v)
}
// SetErroNil sets the value for Erro to be an explicit nil
func (o *NotificacaoUtilizador) SetErroNil() {
	o.Erro.Set(nil)
}

// UnsetErro ensures that no value is present for Erro, not even an explicit nil
func (o *NotificacaoUtilizador) UnsetErro() {
	o.Erro.Unset()
}

// GetNotificacao returns the Notificacao field value if set, zero value otherwise.
func (o *NotificacaoUtilizador) GetNotificacao() Notificacao {
	if o == nil || o.Notificacao == nil {
		var ret Notificacao
		return ret
	}
	return *o.Notificacao
}

// GetNotificacaoOk returns a tuple with the Notificacao field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificacaoUtilizador) GetNotificacaoOk() (*Notificacao, bool) {
	if o == nil || o.Notificacao == nil {
		return nil, false
	}
	return o.Notificacao, true
}

// HasNotificacao returns a boolean if a field has been set.
func (o *NotificacaoUtilizador) HasNotificacao() bool {
	if o != nil && o.Notificacao != nil {
		return true
	}

	return false
}

// SetNotificacao gets a reference to the given Notificacao and assigns it to the Notificacao field.
func (o *NotificacaoUtilizador) SetNotificacao(v Notificacao) {
	o.Notificacao = &v
}

// GetUtilizador returns the Utilizador field value if set, zero value otherwise.
func (o *NotificacaoUtilizador) GetUtilizador() Utilizador {
	if o == nil || o.Utilizador == nil {
		var ret Utilizador
		return ret
	}
	return *o.Utilizador
}

// GetUtilizadorOk returns a tuple with the Utilizador field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificacaoUtilizador) GetUtilizadorOk() (*Utilizador, bool) {
	if o == nil || o.Utilizador == nil {
		return nil, false
	}
	return o.Utilizador, true
}

// HasUtilizador returns a boolean if a field has been set.
func (o *NotificacaoUtilizador) HasUtilizador() bool {
	if o != nil && o.Utilizador != nil {
		return true
	}

	return false
}

// SetUtilizador gets a reference to the given Utilizador and assigns it to the Utilizador field.
func (o *NotificacaoUtilizador) SetUtilizador(v Utilizador) {
	o.Utilizador = &v
}

func (o NotificacaoUtilizador) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Upd.IsSet() {
		toSerialize["upd"] = o.Upd.Get()
	}
	if o.Usr.IsSet() {
		toSerialize["usr"] = o.Usr.Get()
	}
	if o.RefNotificacao.IsSet() {
		toSerialize["refNotificacao"] = o.RefNotificacao.Get()
	}
	if o.RefUtilizador.IsSet() {
		toSerialize["refUtilizador"] = o.RefUtilizador.Get()
	}
	if o.DataEnvio.IsSet() {
		toSerialize["dataEnvio"] = o.DataEnvio.Get()
	}
	if o.Estado != nil {
		toSerialize["estado"] = o.Estado
	}
	if o.Erro.IsSet() {
		toSerialize["erro"] = o.Erro.Get()
	}
	if o.Notificacao != nil {
		toSerialize["notificacao"] = o.Notificacao
	}
	if o.Utilizador != nil {
		toSerialize["utilizador"] = o.Utilizador
	}
	return json.Marshal(toSerialize)
}

type NullableNotificacaoUtilizador struct {
	value *NotificacaoUtilizador
	isSet bool
}

func (v NullableNotificacaoUtilizador) Get() *NotificacaoUtilizador {
	return v.value
}

func (v *NullableNotificacaoUtilizador) Set(val *NotificacaoUtilizador) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificacaoUtilizador) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificacaoUtilizador) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificacaoUtilizador(val *NotificacaoUtilizador) *NullableNotificacaoUtilizador {
	return &NullableNotificacaoUtilizador{value: val, isSet: true}
}

func (v NullableNotificacaoUtilizador) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificacaoUtilizador) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


