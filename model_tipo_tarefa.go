/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TipoTarefa the model 'TipoTarefa'
type TipoTarefa int32

var allowedTipoTarefaEnumValues = []TipoTarefa{
	0,
	1,
}

func (v *TipoTarefa) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TipoTarefa(value)
	for _, existing := range allowedTipoTarefaEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TipoTarefa", value)
}

// NewTipoTarefaFromValue returns a pointer to a valid TipoTarefa
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTipoTarefaFromValue(v int32) (*TipoTarefa, error) {
	ev := TipoTarefa(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TipoTarefa: valid values are %v", v, allowedTipoTarefaEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TipoTarefa) IsValid() bool {
	for _, existing := range allowedTipoTarefaEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TipoTarefa value
func (v TipoTarefa) Ptr() *TipoTarefa {
	return &v
}

type NullableTipoTarefa struct {
	value *TipoTarefa
	isSet bool
}

func (v NullableTipoTarefa) Get() *TipoTarefa {
	return v.value
}

func (v *NullableTipoTarefa) Set(val *TipoTarefa) {
	v.value = val
	v.isSet = true
}

func (v NullableTipoTarefa) IsSet() bool {
	return v.isSet
}

func (v *NullableTipoTarefa) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTipoTarefa(val *TipoTarefa) *NullableTipoTarefa {
	return &NullableTipoTarefa{value: val, isSet: true}
}

func (v NullableTipoTarefa) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTipoTarefa) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

