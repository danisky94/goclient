/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OSCompartimentoProduto struct for OSCompartimentoProduto
type OSCompartimentoProduto struct {
	Compartimento *CompartimentoVM `json:"compartimento,omitempty"`
	Produto *ProdutoVM `json:"produto,omitempty"`
	Ocupado *bool `json:"ocupado,omitempty"`
}

// NewOSCompartimentoProduto instantiates a new OSCompartimentoProduto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSCompartimentoProduto() *OSCompartimentoProduto {
	this := OSCompartimentoProduto{}
	return &this
}

// NewOSCompartimentoProdutoWithDefaults instantiates a new OSCompartimentoProduto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSCompartimentoProdutoWithDefaults() *OSCompartimentoProduto {
	this := OSCompartimentoProduto{}
	return &this
}

// GetCompartimento returns the Compartimento field value if set, zero value otherwise.
func (o *OSCompartimentoProduto) GetCompartimento() CompartimentoVM {
	if o == nil || o.Compartimento == nil {
		var ret CompartimentoVM
		return ret
	}
	return *o.Compartimento
}

// GetCompartimentoOk returns a tuple with the Compartimento field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSCompartimentoProduto) GetCompartimentoOk() (*CompartimentoVM, bool) {
	if o == nil || o.Compartimento == nil {
		return nil, false
	}
	return o.Compartimento, true
}

// HasCompartimento returns a boolean if a field has been set.
func (o *OSCompartimentoProduto) HasCompartimento() bool {
	if o != nil && o.Compartimento != nil {
		return true
	}

	return false
}

// SetCompartimento gets a reference to the given CompartimentoVM and assigns it to the Compartimento field.
func (o *OSCompartimentoProduto) SetCompartimento(v CompartimentoVM) {
	o.Compartimento = &v
}

// GetProduto returns the Produto field value if set, zero value otherwise.
func (o *OSCompartimentoProduto) GetProduto() ProdutoVM {
	if o == nil || o.Produto == nil {
		var ret ProdutoVM
		return ret
	}
	return *o.Produto
}

// GetProdutoOk returns a tuple with the Produto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSCompartimentoProduto) GetProdutoOk() (*ProdutoVM, bool) {
	if o == nil || o.Produto == nil {
		return nil, false
	}
	return o.Produto, true
}

// HasProduto returns a boolean if a field has been set.
func (o *OSCompartimentoProduto) HasProduto() bool {
	if o != nil && o.Produto != nil {
		return true
	}

	return false
}

// SetProduto gets a reference to the given ProdutoVM and assigns it to the Produto field.
func (o *OSCompartimentoProduto) SetProduto(v ProdutoVM) {
	o.Produto = &v
}

// GetOcupado returns the Ocupado field value if set, zero value otherwise.
func (o *OSCompartimentoProduto) GetOcupado() bool {
	if o == nil || o.Ocupado == nil {
		var ret bool
		return ret
	}
	return *o.Ocupado
}

// GetOcupadoOk returns a tuple with the Ocupado field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSCompartimentoProduto) GetOcupadoOk() (*bool, bool) {
	if o == nil || o.Ocupado == nil {
		return nil, false
	}
	return o.Ocupado, true
}

// HasOcupado returns a boolean if a field has been set.
func (o *OSCompartimentoProduto) HasOcupado() bool {
	if o != nil && o.Ocupado != nil {
		return true
	}

	return false
}

// SetOcupado gets a reference to the given bool and assigns it to the Ocupado field.
func (o *OSCompartimentoProduto) SetOcupado(v bool) {
	o.Ocupado = &v
}

func (o OSCompartimentoProduto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Compartimento != nil {
		toSerialize["compartimento"] = o.Compartimento
	}
	if o.Produto != nil {
		toSerialize["produto"] = o.Produto
	}
	if o.Ocupado != nil {
		toSerialize["ocupado"] = o.Ocupado
	}
	return json.Marshal(toSerialize)
}

type NullableOSCompartimentoProduto struct {
	value *OSCompartimentoProduto
	isSet bool
}

func (v NullableOSCompartimentoProduto) Get() *OSCompartimentoProduto {
	return v.value
}

func (v *NullableOSCompartimentoProduto) Set(val *OSCompartimentoProduto) {
	v.value = val
	v.isSet = true
}

func (v NullableOSCompartimentoProduto) IsSet() bool {
	return v.isSet
}

func (v *NullableOSCompartimentoProduto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSCompartimentoProduto(val *OSCompartimentoProduto) *NullableOSCompartimentoProduto {
	return &NullableOSCompartimentoProduto{value: val, isSet: true}
}

func (v NullableOSCompartimentoProduto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSCompartimentoProduto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


