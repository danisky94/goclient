/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CompartimentoHistorico struct for CompartimentoHistorico
type CompartimentoHistorico struct {
	Id *int64 `json:"id,omitempty"`
	Deleted *int32 `json:"deleted,omitempty"`
	Upd NullableTime `json:"upd,omitempty"`
	Usr NullableInt64 `json:"usr,omitempty"`
	RefCompartimento NullableInt64 `json:"refCompartimento,omitempty"`
	Data NullableTime `json:"data,omitempty"`
	RefProduto NullableInt64 `json:"refProduto,omitempty"`
	Evento NullableInt32 `json:"evento,omitempty"`
	Mensagem NullableString `json:"mensagem,omitempty"`
	RefUtilizador NullableInt64 `json:"refUtilizador,omitempty"`
	RefCompartimentoNavigation *Compartimento `json:"refCompartimentoNavigation,omitempty"`
	RefProdutoNavigation *Produto `json:"refProdutoNavigation,omitempty"`
}

// NewCompartimentoHistorico instantiates a new CompartimentoHistorico object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompartimentoHistorico() *CompartimentoHistorico {
	this := CompartimentoHistorico{}
	return &this
}

// NewCompartimentoHistoricoWithDefaults instantiates a new CompartimentoHistorico object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompartimentoHistoricoWithDefaults() *CompartimentoHistorico {
	this := CompartimentoHistorico{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompartimentoHistorico) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompartimentoHistorico) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CompartimentoHistorico) SetId(v int64) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *CompartimentoHistorico) GetDeleted() int32 {
	if o == nil || o.Deleted == nil {
		var ret int32
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompartimentoHistorico) GetDeletedOk() (*int32, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int32 and assigns it to the Deleted field.
func (o *CompartimentoHistorico) SetDeleted(v int32) {
	o.Deleted = &v
}

// GetUpd returns the Upd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompartimentoHistorico) GetUpd() time.Time {
	if o == nil || o.Upd.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Upd.Get()
}

// GetUpdOk returns a tuple with the Upd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompartimentoHistorico) GetUpdOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Upd.Get(), o.Upd.IsSet()
}

// HasUpd returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasUpd() bool {
	if o != nil && o.Upd.IsSet() {
		return true
	}

	return false
}

// SetUpd gets a reference to the given NullableTime and assigns it to the Upd field.
func (o *CompartimentoHistorico) SetUpd(v time.Time) {
	o.Upd.Set(&v)
}
// SetUpdNil sets the value for Upd to be an explicit nil
func (o *CompartimentoHistorico) SetUpdNil() {
	o.Upd.Set(nil)
}

// UnsetUpd ensures that no value is present for Upd, not even an explicit nil
func (o *CompartimentoHistorico) UnsetUpd() {
	o.Upd.Unset()
}

// GetUsr returns the Usr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompartimentoHistorico) GetUsr() int64 {
	if o == nil || o.Usr.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Usr.Get()
}

// GetUsrOk returns a tuple with the Usr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompartimentoHistorico) GetUsrOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Usr.Get(), o.Usr.IsSet()
}

// HasUsr returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasUsr() bool {
	if o != nil && o.Usr.IsSet() {
		return true
	}

	return false
}

// SetUsr gets a reference to the given NullableInt64 and assigns it to the Usr field.
func (o *CompartimentoHistorico) SetUsr(v int64) {
	o.Usr.Set(&v)
}
// SetUsrNil sets the value for Usr to be an explicit nil
func (o *CompartimentoHistorico) SetUsrNil() {
	o.Usr.Set(nil)
}

// UnsetUsr ensures that no value is present for Usr, not even an explicit nil
func (o *CompartimentoHistorico) UnsetUsr() {
	o.Usr.Unset()
}

// GetRefCompartimento returns the RefCompartimento field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompartimentoHistorico) GetRefCompartimento() int64 {
	if o == nil || o.RefCompartimento.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefCompartimento.Get()
}

// GetRefCompartimentoOk returns a tuple with the RefCompartimento field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompartimentoHistorico) GetRefCompartimentoOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefCompartimento.Get(), o.RefCompartimento.IsSet()
}

// HasRefCompartimento returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasRefCompartimento() bool {
	if o != nil && o.RefCompartimento.IsSet() {
		return true
	}

	return false
}

// SetRefCompartimento gets a reference to the given NullableInt64 and assigns it to the RefCompartimento field.
func (o *CompartimentoHistorico) SetRefCompartimento(v int64) {
	o.RefCompartimento.Set(&v)
}
// SetRefCompartimentoNil sets the value for RefCompartimento to be an explicit nil
func (o *CompartimentoHistorico) SetRefCompartimentoNil() {
	o.RefCompartimento.Set(nil)
}

// UnsetRefCompartimento ensures that no value is present for RefCompartimento, not even an explicit nil
func (o *CompartimentoHistorico) UnsetRefCompartimento() {
	o.RefCompartimento.Unset()
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompartimentoHistorico) GetData() time.Time {
	if o == nil || o.Data.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Data.Get()
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompartimentoHistorico) GetDataOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Data.Get(), o.Data.IsSet()
}

// HasData returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasData() bool {
	if o != nil && o.Data.IsSet() {
		return true
	}

	return false
}

// SetData gets a reference to the given NullableTime and assigns it to the Data field.
func (o *CompartimentoHistorico) SetData(v time.Time) {
	o.Data.Set(&v)
}
// SetDataNil sets the value for Data to be an explicit nil
func (o *CompartimentoHistorico) SetDataNil() {
	o.Data.Set(nil)
}

// UnsetData ensures that no value is present for Data, not even an explicit nil
func (o *CompartimentoHistorico) UnsetData() {
	o.Data.Unset()
}

// GetRefProduto returns the RefProduto field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompartimentoHistorico) GetRefProduto() int64 {
	if o == nil || o.RefProduto.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefProduto.Get()
}

// GetRefProdutoOk returns a tuple with the RefProduto field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompartimentoHistorico) GetRefProdutoOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefProduto.Get(), o.RefProduto.IsSet()
}

// HasRefProduto returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasRefProduto() bool {
	if o != nil && o.RefProduto.IsSet() {
		return true
	}

	return false
}

// SetRefProduto gets a reference to the given NullableInt64 and assigns it to the RefProduto field.
func (o *CompartimentoHistorico) SetRefProduto(v int64) {
	o.RefProduto.Set(&v)
}
// SetRefProdutoNil sets the value for RefProduto to be an explicit nil
func (o *CompartimentoHistorico) SetRefProdutoNil() {
	o.RefProduto.Set(nil)
}

// UnsetRefProduto ensures that no value is present for RefProduto, not even an explicit nil
func (o *CompartimentoHistorico) UnsetRefProduto() {
	o.RefProduto.Unset()
}

// GetEvento returns the Evento field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompartimentoHistorico) GetEvento() int32 {
	if o == nil || o.Evento.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Evento.Get()
}

// GetEventoOk returns a tuple with the Evento field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompartimentoHistorico) GetEventoOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Evento.Get(), o.Evento.IsSet()
}

// HasEvento returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasEvento() bool {
	if o != nil && o.Evento.IsSet() {
		return true
	}

	return false
}

// SetEvento gets a reference to the given NullableInt32 and assigns it to the Evento field.
func (o *CompartimentoHistorico) SetEvento(v int32) {
	o.Evento.Set(&v)
}
// SetEventoNil sets the value for Evento to be an explicit nil
func (o *CompartimentoHistorico) SetEventoNil() {
	o.Evento.Set(nil)
}

// UnsetEvento ensures that no value is present for Evento, not even an explicit nil
func (o *CompartimentoHistorico) UnsetEvento() {
	o.Evento.Unset()
}

// GetMensagem returns the Mensagem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompartimentoHistorico) GetMensagem() string {
	if o == nil || o.Mensagem.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mensagem.Get()
}

// GetMensagemOk returns a tuple with the Mensagem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompartimentoHistorico) GetMensagemOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mensagem.Get(), o.Mensagem.IsSet()
}

// HasMensagem returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasMensagem() bool {
	if o != nil && o.Mensagem.IsSet() {
		return true
	}

	return false
}

// SetMensagem gets a reference to the given NullableString and assigns it to the Mensagem field.
func (o *CompartimentoHistorico) SetMensagem(v string) {
	o.Mensagem.Set(&v)
}
// SetMensagemNil sets the value for Mensagem to be an explicit nil
func (o *CompartimentoHistorico) SetMensagemNil() {
	o.Mensagem.Set(nil)
}

// UnsetMensagem ensures that no value is present for Mensagem, not even an explicit nil
func (o *CompartimentoHistorico) UnsetMensagem() {
	o.Mensagem.Unset()
}

// GetRefUtilizador returns the RefUtilizador field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompartimentoHistorico) GetRefUtilizador() int64 {
	if o == nil || o.RefUtilizador.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefUtilizador.Get()
}

// GetRefUtilizadorOk returns a tuple with the RefUtilizador field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompartimentoHistorico) GetRefUtilizadorOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefUtilizador.Get(), o.RefUtilizador.IsSet()
}

// HasRefUtilizador returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasRefUtilizador() bool {
	if o != nil && o.RefUtilizador.IsSet() {
		return true
	}

	return false
}

// SetRefUtilizador gets a reference to the given NullableInt64 and assigns it to the RefUtilizador field.
func (o *CompartimentoHistorico) SetRefUtilizador(v int64) {
	o.RefUtilizador.Set(&v)
}
// SetRefUtilizadorNil sets the value for RefUtilizador to be an explicit nil
func (o *CompartimentoHistorico) SetRefUtilizadorNil() {
	o.RefUtilizador.Set(nil)
}

// UnsetRefUtilizador ensures that no value is present for RefUtilizador, not even an explicit nil
func (o *CompartimentoHistorico) UnsetRefUtilizador() {
	o.RefUtilizador.Unset()
}

// GetRefCompartimentoNavigation returns the RefCompartimentoNavigation field value if set, zero value otherwise.
func (o *CompartimentoHistorico) GetRefCompartimentoNavigation() Compartimento {
	if o == nil || o.RefCompartimentoNavigation == nil {
		var ret Compartimento
		return ret
	}
	return *o.RefCompartimentoNavigation
}

// GetRefCompartimentoNavigationOk returns a tuple with the RefCompartimentoNavigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompartimentoHistorico) GetRefCompartimentoNavigationOk() (*Compartimento, bool) {
	if o == nil || o.RefCompartimentoNavigation == nil {
		return nil, false
	}
	return o.RefCompartimentoNavigation, true
}

// HasRefCompartimentoNavigation returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasRefCompartimentoNavigation() bool {
	if o != nil && o.RefCompartimentoNavigation != nil {
		return true
	}

	return false
}

// SetRefCompartimentoNavigation gets a reference to the given Compartimento and assigns it to the RefCompartimentoNavigation field.
func (o *CompartimentoHistorico) SetRefCompartimentoNavigation(v Compartimento) {
	o.RefCompartimentoNavigation = &v
}

// GetRefProdutoNavigation returns the RefProdutoNavigation field value if set, zero value otherwise.
func (o *CompartimentoHistorico) GetRefProdutoNavigation() Produto {
	if o == nil || o.RefProdutoNavigation == nil {
		var ret Produto
		return ret
	}
	return *o.RefProdutoNavigation
}

// GetRefProdutoNavigationOk returns a tuple with the RefProdutoNavigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompartimentoHistorico) GetRefProdutoNavigationOk() (*Produto, bool) {
	if o == nil || o.RefProdutoNavigation == nil {
		return nil, false
	}
	return o.RefProdutoNavigation, true
}

// HasRefProdutoNavigation returns a boolean if a field has been set.
func (o *CompartimentoHistorico) HasRefProdutoNavigation() bool {
	if o != nil && o.RefProdutoNavigation != nil {
		return true
	}

	return false
}

// SetRefProdutoNavigation gets a reference to the given Produto and assigns it to the RefProdutoNavigation field.
func (o *CompartimentoHistorico) SetRefProdutoNavigation(v Produto) {
	o.RefProdutoNavigation = &v
}

func (o CompartimentoHistorico) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Upd.IsSet() {
		toSerialize["upd"] = o.Upd.Get()
	}
	if o.Usr.IsSet() {
		toSerialize["usr"] = o.Usr.Get()
	}
	if o.RefCompartimento.IsSet() {
		toSerialize["refCompartimento"] = o.RefCompartimento.Get()
	}
	if o.Data.IsSet() {
		toSerialize["data"] = o.Data.Get()
	}
	if o.RefProduto.IsSet() {
		toSerialize["refProduto"] = o.RefProduto.Get()
	}
	if o.Evento.IsSet() {
		toSerialize["evento"] = o.Evento.Get()
	}
	if o.Mensagem.IsSet() {
		toSerialize["mensagem"] = o.Mensagem.Get()
	}
	if o.RefUtilizador.IsSet() {
		toSerialize["refUtilizador"] = o.RefUtilizador.Get()
	}
	if o.RefCompartimentoNavigation != nil {
		toSerialize["refCompartimentoNavigation"] = o.RefCompartimentoNavigation
	}
	if o.RefProdutoNavigation != nil {
		toSerialize["refProdutoNavigation"] = o.RefProdutoNavigation
	}
	return json.Marshal(toSerialize)
}

type NullableCompartimentoHistorico struct {
	value *CompartimentoHistorico
	isSet bool
}

func (v NullableCompartimentoHistorico) Get() *CompartimentoHistorico {
	return v.value
}

func (v *NullableCompartimentoHistorico) Set(val *CompartimentoHistorico) {
	v.value = val
	v.isSet = true
}

func (v NullableCompartimentoHistorico) IsSet() bool {
	return v.isSet
}

func (v *NullableCompartimentoHistorico) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompartimentoHistorico(val *CompartimentoHistorico) *NullableCompartimentoHistorico {
	return &NullableCompartimentoHistorico{value: val, isSet: true}
}

func (v NullableCompartimentoHistorico) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompartimentoHistorico) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


