/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Compartimento struct for Compartimento
type Compartimento struct {
	Id *int64 `json:"id,omitempty"`
	Deleted *int32 `json:"deleted,omitempty"`
	Upd NullableTime `json:"upd,omitempty"`
	Usr NullableInt64 `json:"usr,omitempty"`
	Numero NullableString `json:"numero,omitempty"`
	Tipo *TipoCompartimento `json:"tipo,omitempty"`
	Ativo NullableBool `json:"ativo,omitempty"`
	RefGvm NullableInt64 `json:"refGvm,omitempty"`
	RefProduto NullableInt64 `json:"refProduto,omitempty"`
	CompartimentoEstado *CompartimentoEstado `json:"compartimentoEstado,omitempty"`
	Gvm *Gvm `json:"gvm,omitempty"`
	Produto *Produto `json:"produto,omitempty"`
	CompartimentoHistoricos []CompartimentoHistorico `json:"compartimentoHistoricos,omitempty"`
	Fechaduras []Fechadura `json:"fechaduras,omitempty"`
	Eventos []Evento `json:"eventos,omitempty"`
	OrdemServicoCompartimentos []OrdemServicoCompartimento `json:"ordemServicoCompartimentos,omitempty"`
	Leds []Led `json:"leds,omitempty"`
}

// NewCompartimento instantiates a new Compartimento object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompartimento() *Compartimento {
	this := Compartimento{}
	return &this
}

// NewCompartimentoWithDefaults instantiates a new Compartimento object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompartimentoWithDefaults() *Compartimento {
	this := Compartimento{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Compartimento) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Compartimento) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Compartimento) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Compartimento) SetId(v int64) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Compartimento) GetDeleted() int32 {
	if o == nil || o.Deleted == nil {
		var ret int32
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Compartimento) GetDeletedOk() (*int32, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Compartimento) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int32 and assigns it to the Deleted field.
func (o *Compartimento) SetDeleted(v int32) {
	o.Deleted = &v
}

// GetUpd returns the Upd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Compartimento) GetUpd() time.Time {
	if o == nil || o.Upd.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Upd.Get()
}

// GetUpdOk returns a tuple with the Upd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Compartimento) GetUpdOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Upd.Get(), o.Upd.IsSet()
}

// HasUpd returns a boolean if a field has been set.
func (o *Compartimento) HasUpd() bool {
	if o != nil && o.Upd.IsSet() {
		return true
	}

	return false
}

// SetUpd gets a reference to the given NullableTime and assigns it to the Upd field.
func (o *Compartimento) SetUpd(v time.Time) {
	o.Upd.Set(&v)
}
// SetUpdNil sets the value for Upd to be an explicit nil
func (o *Compartimento) SetUpdNil() {
	o.Upd.Set(nil)
}

// UnsetUpd ensures that no value is present for Upd, not even an explicit nil
func (o *Compartimento) UnsetUpd() {
	o.Upd.Unset()
}

// GetUsr returns the Usr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Compartimento) GetUsr() int64 {
	if o == nil || o.Usr.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Usr.Get()
}

// GetUsrOk returns a tuple with the Usr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Compartimento) GetUsrOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Usr.Get(), o.Usr.IsSet()
}

// HasUsr returns a boolean if a field has been set.
func (o *Compartimento) HasUsr() bool {
	if o != nil && o.Usr.IsSet() {
		return true
	}

	return false
}

// SetUsr gets a reference to the given NullableInt64 and assigns it to the Usr field.
func (o *Compartimento) SetUsr(v int64) {
	o.Usr.Set(&v)
}
// SetUsrNil sets the value for Usr to be an explicit nil
func (o *Compartimento) SetUsrNil() {
	o.Usr.Set(nil)
}

// UnsetUsr ensures that no value is present for Usr, not even an explicit nil
func (o *Compartimento) UnsetUsr() {
	o.Usr.Unset()
}

// GetNumero returns the Numero field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Compartimento) GetNumero() string {
	if o == nil || o.Numero.Get() == nil {
		var ret string
		return ret
	}
	return *o.Numero.Get()
}

// GetNumeroOk returns a tuple with the Numero field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Compartimento) GetNumeroOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Numero.Get(), o.Numero.IsSet()
}

// HasNumero returns a boolean if a field has been set.
func (o *Compartimento) HasNumero() bool {
	if o != nil && o.Numero.IsSet() {
		return true
	}

	return false
}

// SetNumero gets a reference to the given NullableString and assigns it to the Numero field.
func (o *Compartimento) SetNumero(v string) {
	o.Numero.Set(&v)
}
// SetNumeroNil sets the value for Numero to be an explicit nil
func (o *Compartimento) SetNumeroNil() {
	o.Numero.Set(nil)
}

// UnsetNumero ensures that no value is present for Numero, not even an explicit nil
func (o *Compartimento) UnsetNumero() {
	o.Numero.Unset()
}

// GetTipo returns the Tipo field value if set, zero value otherwise.
func (o *Compartimento) GetTipo() TipoCompartimento {
	if o == nil || o.Tipo == nil {
		var ret TipoCompartimento
		return ret
	}
	return *o.Tipo
}

// GetTipoOk returns a tuple with the Tipo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Compartimento) GetTipoOk() (*TipoCompartimento, bool) {
	if o == nil || o.Tipo == nil {
		return nil, false
	}
	return o.Tipo, true
}

// HasTipo returns a boolean if a field has been set.
func (o *Compartimento) HasTipo() bool {
	if o != nil && o.Tipo != nil {
		return true
	}

	return false
}

// SetTipo gets a reference to the given TipoCompartimento and assigns it to the Tipo field.
func (o *Compartimento) SetTipo(v TipoCompartimento) {
	o.Tipo = &v
}

// GetAtivo returns the Ativo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Compartimento) GetAtivo() bool {
	if o == nil || o.Ativo.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Ativo.Get()
}

// GetAtivoOk returns a tuple with the Ativo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Compartimento) GetAtivoOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Ativo.Get(), o.Ativo.IsSet()
}

// HasAtivo returns a boolean if a field has been set.
func (o *Compartimento) HasAtivo() bool {
	if o != nil && o.Ativo.IsSet() {
		return true
	}

	return false
}

// SetAtivo gets a reference to the given NullableBool and assigns it to the Ativo field.
func (o *Compartimento) SetAtivo(v bool) {
	o.Ativo.Set(&v)
}
// SetAtivoNil sets the value for Ativo to be an explicit nil
func (o *Compartimento) SetAtivoNil() {
	o.Ativo.Set(nil)
}

// UnsetAtivo ensures that no value is present for Ativo, not even an explicit nil
func (o *Compartimento) UnsetAtivo() {
	o.Ativo.Unset()
}

// GetRefGvm returns the RefGvm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Compartimento) GetRefGvm() int64 {
	if o == nil || o.RefGvm.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefGvm.Get()
}

// GetRefGvmOk returns a tuple with the RefGvm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Compartimento) GetRefGvmOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefGvm.Get(), o.RefGvm.IsSet()
}

// HasRefGvm returns a boolean if a field has been set.
func (o *Compartimento) HasRefGvm() bool {
	if o != nil && o.RefGvm.IsSet() {
		return true
	}

	return false
}

// SetRefGvm gets a reference to the given NullableInt64 and assigns it to the RefGvm field.
func (o *Compartimento) SetRefGvm(v int64) {
	o.RefGvm.Set(&v)
}
// SetRefGvmNil sets the value for RefGvm to be an explicit nil
func (o *Compartimento) SetRefGvmNil() {
	o.RefGvm.Set(nil)
}

// UnsetRefGvm ensures that no value is present for RefGvm, not even an explicit nil
func (o *Compartimento) UnsetRefGvm() {
	o.RefGvm.Unset()
}

// GetRefProduto returns the RefProduto field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Compartimento) GetRefProduto() int64 {
	if o == nil || o.RefProduto.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefProduto.Get()
}

// GetRefProdutoOk returns a tuple with the RefProduto field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Compartimento) GetRefProdutoOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefProduto.Get(), o.RefProduto.IsSet()
}

// HasRefProduto returns a boolean if a field has been set.
func (o *Compartimento) HasRefProduto() bool {
	if o != nil && o.RefProduto.IsSet() {
		return true
	}

	return false
}

// SetRefProduto gets a reference to the given NullableInt64 and assigns it to the RefProduto field.
func (o *Compartimento) SetRefProduto(v int64) {
	o.RefProduto.Set(&v)
}
// SetRefProdutoNil sets the value for RefProduto to be an explicit nil
func (o *Compartimento) SetRefProdutoNil() {
	o.RefProduto.Set(nil)
}

// UnsetRefProduto ensures that no value is present for RefProduto, not even an explicit nil
func (o *Compartimento) UnsetRefProduto() {
	o.RefProduto.Unset()
}

// GetCompartimentoEstado returns the CompartimentoEstado field value if set, zero value otherwise.
func (o *Compartimento) GetCompartimentoEstado() CompartimentoEstado {
	if o == nil || o.CompartimentoEstado == nil {
		var ret CompartimentoEstado
		return ret
	}
	return *o.CompartimentoEstado
}

// GetCompartimentoEstadoOk returns a tuple with the CompartimentoEstado field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Compartimento) GetCompartimentoEstadoOk() (*CompartimentoEstado, bool) {
	if o == nil || o.CompartimentoEstado == nil {
		return nil, false
	}
	return o.CompartimentoEstado, true
}

// HasCompartimentoEstado returns a boolean if a field has been set.
func (o *Compartimento) HasCompartimentoEstado() bool {
	if o != nil && o.CompartimentoEstado != nil {
		return true
	}

	return false
}

// SetCompartimentoEstado gets a reference to the given CompartimentoEstado and assigns it to the CompartimentoEstado field.
func (o *Compartimento) SetCompartimentoEstado(v CompartimentoEstado) {
	o.CompartimentoEstado = &v
}

// GetGvm returns the Gvm field value if set, zero value otherwise.
func (o *Compartimento) GetGvm() Gvm {
	if o == nil || o.Gvm == nil {
		var ret Gvm
		return ret
	}
	return *o.Gvm
}

// GetGvmOk returns a tuple with the Gvm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Compartimento) GetGvmOk() (*Gvm, bool) {
	if o == nil || o.Gvm == nil {
		return nil, false
	}
	return o.Gvm, true
}

// HasGvm returns a boolean if a field has been set.
func (o *Compartimento) HasGvm() bool {
	if o != nil && o.Gvm != nil {
		return true
	}

	return false
}

// SetGvm gets a reference to the given Gvm and assigns it to the Gvm field.
func (o *Compartimento) SetGvm(v Gvm) {
	o.Gvm = &v
}

// GetProduto returns the Produto field value if set, zero value otherwise.
func (o *Compartimento) GetProduto() Produto {
	if o == nil || o.Produto == nil {
		var ret Produto
		return ret
	}
	return *o.Produto
}

// GetProdutoOk returns a tuple with the Produto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Compartimento) GetProdutoOk() (*Produto, bool) {
	if o == nil || o.Produto == nil {
		return nil, false
	}
	return o.Produto, true
}

// HasProduto returns a boolean if a field has been set.
func (o *Compartimento) HasProduto() bool {
	if o != nil && o.Produto != nil {
		return true
	}

	return false
}

// SetProduto gets a reference to the given Produto and assigns it to the Produto field.
func (o *Compartimento) SetProduto(v Produto) {
	o.Produto = &v
}

// GetCompartimentoHistoricos returns the CompartimentoHistoricos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Compartimento) GetCompartimentoHistoricos() []CompartimentoHistorico {
	if o == nil  {
		var ret []CompartimentoHistorico
		return ret
	}
	return o.CompartimentoHistoricos
}

// GetCompartimentoHistoricosOk returns a tuple with the CompartimentoHistoricos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Compartimento) GetCompartimentoHistoricosOk() (*[]CompartimentoHistorico, bool) {
	if o == nil || o.CompartimentoHistoricos == nil {
		return nil, false
	}
	return &o.CompartimentoHistoricos, true
}

// HasCompartimentoHistoricos returns a boolean if a field has been set.
func (o *Compartimento) HasCompartimentoHistoricos() bool {
	if o != nil && o.CompartimentoHistoricos != nil {
		return true
	}

	return false
}

// SetCompartimentoHistoricos gets a reference to the given []CompartimentoHistorico and assigns it to the CompartimentoHistoricos field.
func (o *Compartimento) SetCompartimentoHistoricos(v []CompartimentoHistorico) {
	o.CompartimentoHistoricos = v
}

// GetFechaduras returns the Fechaduras field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Compartimento) GetFechaduras() []Fechadura {
	if o == nil  {
		var ret []Fechadura
		return ret
	}
	return o.Fechaduras
}

// GetFechadurasOk returns a tuple with the Fechaduras field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Compartimento) GetFechadurasOk() (*[]Fechadura, bool) {
	if o == nil || o.Fechaduras == nil {
		return nil, false
	}
	return &o.Fechaduras, true
}

// HasFechaduras returns a boolean if a field has been set.
func (o *Compartimento) HasFechaduras() bool {
	if o != nil && o.Fechaduras != nil {
		return true
	}

	return false
}

// SetFechaduras gets a reference to the given []Fechadura and assigns it to the Fechaduras field.
func (o *Compartimento) SetFechaduras(v []Fechadura) {
	o.Fechaduras = v
}

// GetEventos returns the Eventos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Compartimento) GetEventos() []Evento {
	if o == nil  {
		var ret []Evento
		return ret
	}
	return o.Eventos
}

// GetEventosOk returns a tuple with the Eventos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Compartimento) GetEventosOk() (*[]Evento, bool) {
	if o == nil || o.Eventos == nil {
		return nil, false
	}
	return &o.Eventos, true
}

// HasEventos returns a boolean if a field has been set.
func (o *Compartimento) HasEventos() bool {
	if o != nil && o.Eventos != nil {
		return true
	}

	return false
}

// SetEventos gets a reference to the given []Evento and assigns it to the Eventos field.
func (o *Compartimento) SetEventos(v []Evento) {
	o.Eventos = v
}

// GetOrdemServicoCompartimentos returns the OrdemServicoCompartimentos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Compartimento) GetOrdemServicoCompartimentos() []OrdemServicoCompartimento {
	if o == nil  {
		var ret []OrdemServicoCompartimento
		return ret
	}
	return o.OrdemServicoCompartimentos
}

// GetOrdemServicoCompartimentosOk returns a tuple with the OrdemServicoCompartimentos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Compartimento) GetOrdemServicoCompartimentosOk() (*[]OrdemServicoCompartimento, bool) {
	if o == nil || o.OrdemServicoCompartimentos == nil {
		return nil, false
	}
	return &o.OrdemServicoCompartimentos, true
}

// HasOrdemServicoCompartimentos returns a boolean if a field has been set.
func (o *Compartimento) HasOrdemServicoCompartimentos() bool {
	if o != nil && o.OrdemServicoCompartimentos != nil {
		return true
	}

	return false
}

// SetOrdemServicoCompartimentos gets a reference to the given []OrdemServicoCompartimento and assigns it to the OrdemServicoCompartimentos field.
func (o *Compartimento) SetOrdemServicoCompartimentos(v []OrdemServicoCompartimento) {
	o.OrdemServicoCompartimentos = v
}

// GetLeds returns the Leds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Compartimento) GetLeds() []Led {
	if o == nil  {
		var ret []Led
		return ret
	}
	return o.Leds
}

// GetLedsOk returns a tuple with the Leds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Compartimento) GetLedsOk() (*[]Led, bool) {
	if o == nil || o.Leds == nil {
		return nil, false
	}
	return &o.Leds, true
}

// HasLeds returns a boolean if a field has been set.
func (o *Compartimento) HasLeds() bool {
	if o != nil && o.Leds != nil {
		return true
	}

	return false
}

// SetLeds gets a reference to the given []Led and assigns it to the Leds field.
func (o *Compartimento) SetLeds(v []Led) {
	o.Leds = v
}

func (o Compartimento) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Upd.IsSet() {
		toSerialize["upd"] = o.Upd.Get()
	}
	if o.Usr.IsSet() {
		toSerialize["usr"] = o.Usr.Get()
	}
	if o.Numero.IsSet() {
		toSerialize["numero"] = o.Numero.Get()
	}
	if o.Tipo != nil {
		toSerialize["tipo"] = o.Tipo
	}
	if o.Ativo.IsSet() {
		toSerialize["ativo"] = o.Ativo.Get()
	}
	if o.RefGvm.IsSet() {
		toSerialize["refGvm"] = o.RefGvm.Get()
	}
	if o.RefProduto.IsSet() {
		toSerialize["refProduto"] = o.RefProduto.Get()
	}
	if o.CompartimentoEstado != nil {
		toSerialize["compartimentoEstado"] = o.CompartimentoEstado
	}
	if o.Gvm != nil {
		toSerialize["gvm"] = o.Gvm
	}
	if o.Produto != nil {
		toSerialize["produto"] = o.Produto
	}
	if o.CompartimentoHistoricos != nil {
		toSerialize["compartimentoHistoricos"] = o.CompartimentoHistoricos
	}
	if o.Fechaduras != nil {
		toSerialize["fechaduras"] = o.Fechaduras
	}
	if o.Eventos != nil {
		toSerialize["eventos"] = o.Eventos
	}
	if o.OrdemServicoCompartimentos != nil {
		toSerialize["ordemServicoCompartimentos"] = o.OrdemServicoCompartimentos
	}
	if o.Leds != nil {
		toSerialize["leds"] = o.Leds
	}
	return json.Marshal(toSerialize)
}

type NullableCompartimento struct {
	value *Compartimento
	isSet bool
}

func (v NullableCompartimento) Get() *Compartimento {
	return v.value
}

func (v *NullableCompartimento) Set(val *Compartimento) {
	v.value = val
	v.isSet = true
}

func (v NullableCompartimento) IsSet() bool {
	return v.isSet
}

func (v *NullableCompartimento) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompartimento(val *Compartimento) *NullableCompartimento {
	return &NullableCompartimento{value: val, isSet: true}
}

func (v NullableCompartimento) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompartimento) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


