/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProdutoVM struct for ProdutoVM
type ProdutoVM struct {
	Id NullableInt64 `json:"id,omitempty"`
	Nome NullableString `json:"nome,omitempty"`
	RefEntidade NullableInt64 `json:"refEntidade,omitempty"`
	Tipo *TipoProduto `json:"tipo,omitempty"`
	Descricao NullableString `json:"descricao,omitempty"`
	Preco NullableFloat64 `json:"preco,omitempty"`
	PresoTotal NullableString `json:"presoTotal,omitempty"`
	PesoLiquido NullableString `json:"pesoLiquido,omitempty"`
	Dimensoes NullableString `json:"dimensoes,omitempty"`
	RefImagem NullableInt64 `json:"refImagem,omitempty"`
}

// NewProdutoVM instantiates a new ProdutoVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProdutoVM() *ProdutoVM {
	this := ProdutoVM{}
	return &this
}

// NewProdutoVMWithDefaults instantiates a new ProdutoVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProdutoVMWithDefaults() *ProdutoVM {
	this := ProdutoVM{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProdutoVM) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProdutoVM) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ProdutoVM) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ProdutoVM) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ProdutoVM) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ProdutoVM) UnsetId() {
	o.Id.Unset()
}

// GetNome returns the Nome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProdutoVM) GetNome() string {
	if o == nil || o.Nome.Get() == nil {
		var ret string
		return ret
	}
	return *o.Nome.Get()
}

// GetNomeOk returns a tuple with the Nome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProdutoVM) GetNomeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Nome.Get(), o.Nome.IsSet()
}

// HasNome returns a boolean if a field has been set.
func (o *ProdutoVM) HasNome() bool {
	if o != nil && o.Nome.IsSet() {
		return true
	}

	return false
}

// SetNome gets a reference to the given NullableString and assigns it to the Nome field.
func (o *ProdutoVM) SetNome(v string) {
	o.Nome.Set(&v)
}
// SetNomeNil sets the value for Nome to be an explicit nil
func (o *ProdutoVM) SetNomeNil() {
	o.Nome.Set(nil)
}

// UnsetNome ensures that no value is present for Nome, not even an explicit nil
func (o *ProdutoVM) UnsetNome() {
	o.Nome.Unset()
}

// GetRefEntidade returns the RefEntidade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProdutoVM) GetRefEntidade() int64 {
	if o == nil || o.RefEntidade.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefEntidade.Get()
}

// GetRefEntidadeOk returns a tuple with the RefEntidade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProdutoVM) GetRefEntidadeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefEntidade.Get(), o.RefEntidade.IsSet()
}

// HasRefEntidade returns a boolean if a field has been set.
func (o *ProdutoVM) HasRefEntidade() bool {
	if o != nil && o.RefEntidade.IsSet() {
		return true
	}

	return false
}

// SetRefEntidade gets a reference to the given NullableInt64 and assigns it to the RefEntidade field.
func (o *ProdutoVM) SetRefEntidade(v int64) {
	o.RefEntidade.Set(&v)
}
// SetRefEntidadeNil sets the value for RefEntidade to be an explicit nil
func (o *ProdutoVM) SetRefEntidadeNil() {
	o.RefEntidade.Set(nil)
}

// UnsetRefEntidade ensures that no value is present for RefEntidade, not even an explicit nil
func (o *ProdutoVM) UnsetRefEntidade() {
	o.RefEntidade.Unset()
}

// GetTipo returns the Tipo field value if set, zero value otherwise.
func (o *ProdutoVM) GetTipo() TipoProduto {
	if o == nil || o.Tipo == nil {
		var ret TipoProduto
		return ret
	}
	return *o.Tipo
}

// GetTipoOk returns a tuple with the Tipo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProdutoVM) GetTipoOk() (*TipoProduto, bool) {
	if o == nil || o.Tipo == nil {
		return nil, false
	}
	return o.Tipo, true
}

// HasTipo returns a boolean if a field has been set.
func (o *ProdutoVM) HasTipo() bool {
	if o != nil && o.Tipo != nil {
		return true
	}

	return false
}

// SetTipo gets a reference to the given TipoProduto and assigns it to the Tipo field.
func (o *ProdutoVM) SetTipo(v TipoProduto) {
	o.Tipo = &v
}

// GetDescricao returns the Descricao field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProdutoVM) GetDescricao() string {
	if o == nil || o.Descricao.Get() == nil {
		var ret string
		return ret
	}
	return *o.Descricao.Get()
}

// GetDescricaoOk returns a tuple with the Descricao field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProdutoVM) GetDescricaoOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Descricao.Get(), o.Descricao.IsSet()
}

// HasDescricao returns a boolean if a field has been set.
func (o *ProdutoVM) HasDescricao() bool {
	if o != nil && o.Descricao.IsSet() {
		return true
	}

	return false
}

// SetDescricao gets a reference to the given NullableString and assigns it to the Descricao field.
func (o *ProdutoVM) SetDescricao(v string) {
	o.Descricao.Set(&v)
}
// SetDescricaoNil sets the value for Descricao to be an explicit nil
func (o *ProdutoVM) SetDescricaoNil() {
	o.Descricao.Set(nil)
}

// UnsetDescricao ensures that no value is present for Descricao, not even an explicit nil
func (o *ProdutoVM) UnsetDescricao() {
	o.Descricao.Unset()
}

// GetPreco returns the Preco field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProdutoVM) GetPreco() float64 {
	if o == nil || o.Preco.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Preco.Get()
}

// GetPrecoOk returns a tuple with the Preco field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProdutoVM) GetPrecoOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Preco.Get(), o.Preco.IsSet()
}

// HasPreco returns a boolean if a field has been set.
func (o *ProdutoVM) HasPreco() bool {
	if o != nil && o.Preco.IsSet() {
		return true
	}

	return false
}

// SetPreco gets a reference to the given NullableFloat64 and assigns it to the Preco field.
func (o *ProdutoVM) SetPreco(v float64) {
	o.Preco.Set(&v)
}
// SetPrecoNil sets the value for Preco to be an explicit nil
func (o *ProdutoVM) SetPrecoNil() {
	o.Preco.Set(nil)
}

// UnsetPreco ensures that no value is present for Preco, not even an explicit nil
func (o *ProdutoVM) UnsetPreco() {
	o.Preco.Unset()
}

// GetPresoTotal returns the PresoTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProdutoVM) GetPresoTotal() string {
	if o == nil || o.PresoTotal.Get() == nil {
		var ret string
		return ret
	}
	return *o.PresoTotal.Get()
}

// GetPresoTotalOk returns a tuple with the PresoTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProdutoVM) GetPresoTotalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PresoTotal.Get(), o.PresoTotal.IsSet()
}

// HasPresoTotal returns a boolean if a field has been set.
func (o *ProdutoVM) HasPresoTotal() bool {
	if o != nil && o.PresoTotal.IsSet() {
		return true
	}

	return false
}

// SetPresoTotal gets a reference to the given NullableString and assigns it to the PresoTotal field.
func (o *ProdutoVM) SetPresoTotal(v string) {
	o.PresoTotal.Set(&v)
}
// SetPresoTotalNil sets the value for PresoTotal to be an explicit nil
func (o *ProdutoVM) SetPresoTotalNil() {
	o.PresoTotal.Set(nil)
}

// UnsetPresoTotal ensures that no value is present for PresoTotal, not even an explicit nil
func (o *ProdutoVM) UnsetPresoTotal() {
	o.PresoTotal.Unset()
}

// GetPesoLiquido returns the PesoLiquido field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProdutoVM) GetPesoLiquido() string {
	if o == nil || o.PesoLiquido.Get() == nil {
		var ret string
		return ret
	}
	return *o.PesoLiquido.Get()
}

// GetPesoLiquidoOk returns a tuple with the PesoLiquido field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProdutoVM) GetPesoLiquidoOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PesoLiquido.Get(), o.PesoLiquido.IsSet()
}

// HasPesoLiquido returns a boolean if a field has been set.
func (o *ProdutoVM) HasPesoLiquido() bool {
	if o != nil && o.PesoLiquido.IsSet() {
		return true
	}

	return false
}

// SetPesoLiquido gets a reference to the given NullableString and assigns it to the PesoLiquido field.
func (o *ProdutoVM) SetPesoLiquido(v string) {
	o.PesoLiquido.Set(&v)
}
// SetPesoLiquidoNil sets the value for PesoLiquido to be an explicit nil
func (o *ProdutoVM) SetPesoLiquidoNil() {
	o.PesoLiquido.Set(nil)
}

// UnsetPesoLiquido ensures that no value is present for PesoLiquido, not even an explicit nil
func (o *ProdutoVM) UnsetPesoLiquido() {
	o.PesoLiquido.Unset()
}

// GetDimensoes returns the Dimensoes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProdutoVM) GetDimensoes() string {
	if o == nil || o.Dimensoes.Get() == nil {
		var ret string
		return ret
	}
	return *o.Dimensoes.Get()
}

// GetDimensoesOk returns a tuple with the Dimensoes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProdutoVM) GetDimensoesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Dimensoes.Get(), o.Dimensoes.IsSet()
}

// HasDimensoes returns a boolean if a field has been set.
func (o *ProdutoVM) HasDimensoes() bool {
	if o != nil && o.Dimensoes.IsSet() {
		return true
	}

	return false
}

// SetDimensoes gets a reference to the given NullableString and assigns it to the Dimensoes field.
func (o *ProdutoVM) SetDimensoes(v string) {
	o.Dimensoes.Set(&v)
}
// SetDimensoesNil sets the value for Dimensoes to be an explicit nil
func (o *ProdutoVM) SetDimensoesNil() {
	o.Dimensoes.Set(nil)
}

// UnsetDimensoes ensures that no value is present for Dimensoes, not even an explicit nil
func (o *ProdutoVM) UnsetDimensoes() {
	o.Dimensoes.Unset()
}

// GetRefImagem returns the RefImagem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProdutoVM) GetRefImagem() int64 {
	if o == nil || o.RefImagem.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefImagem.Get()
}

// GetRefImagemOk returns a tuple with the RefImagem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProdutoVM) GetRefImagemOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefImagem.Get(), o.RefImagem.IsSet()
}

// HasRefImagem returns a boolean if a field has been set.
func (o *ProdutoVM) HasRefImagem() bool {
	if o != nil && o.RefImagem.IsSet() {
		return true
	}

	return false
}

// SetRefImagem gets a reference to the given NullableInt64 and assigns it to the RefImagem field.
func (o *ProdutoVM) SetRefImagem(v int64) {
	o.RefImagem.Set(&v)
}
// SetRefImagemNil sets the value for RefImagem to be an explicit nil
func (o *ProdutoVM) SetRefImagemNil() {
	o.RefImagem.Set(nil)
}

// UnsetRefImagem ensures that no value is present for RefImagem, not even an explicit nil
func (o *ProdutoVM) UnsetRefImagem() {
	o.RefImagem.Unset()
}

func (o ProdutoVM) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Nome.IsSet() {
		toSerialize["nome"] = o.Nome.Get()
	}
	if o.RefEntidade.IsSet() {
		toSerialize["refEntidade"] = o.RefEntidade.Get()
	}
	if o.Tipo != nil {
		toSerialize["tipo"] = o.Tipo
	}
	if o.Descricao.IsSet() {
		toSerialize["descricao"] = o.Descricao.Get()
	}
	if o.Preco.IsSet() {
		toSerialize["preco"] = o.Preco.Get()
	}
	if o.PresoTotal.IsSet() {
		toSerialize["presoTotal"] = o.PresoTotal.Get()
	}
	if o.PesoLiquido.IsSet() {
		toSerialize["pesoLiquido"] = o.PesoLiquido.Get()
	}
	if o.Dimensoes.IsSet() {
		toSerialize["dimensoes"] = o.Dimensoes.Get()
	}
	if o.RefImagem.IsSet() {
		toSerialize["refImagem"] = o.RefImagem.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProdutoVM struct {
	value *ProdutoVM
	isSet bool
}

func (v NullableProdutoVM) Get() *ProdutoVM {
	return v.value
}

func (v *NullableProdutoVM) Set(val *ProdutoVM) {
	v.value = val
	v.isSet = true
}

func (v NullableProdutoVM) IsSet() bool {
	return v.isSet
}

func (v *NullableProdutoVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProdutoVM(val *ProdutoVM) *NullableProdutoVM {
	return &NullableProdutoVM{value: val, isSet: true}
}

func (v NullableProdutoVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProdutoVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


