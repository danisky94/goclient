/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// OrdemServicoApiService OrdemServicoApi service
type OrdemServicoApiService service

type ApiGvmsOrdemServicoAbrirOrdemServicoGetRequest struct {
	ctx _context.Context
	ApiService *OrdemServicoApiService
	token *string
}

func (r ApiGvmsOrdemServicoAbrirOrdemServicoGetRequest) Token(token string) ApiGvmsOrdemServicoAbrirOrdemServicoGetRequest {
	r.token = &token
	return r
}

func (r ApiGvmsOrdemServicoAbrirOrdemServicoGetRequest) Execute() (AberturaOrdemServicoResultado, *_nethttp.Response, error) {
	return r.ApiService.GvmsOrdemServicoAbrirOrdemServicoGetExecute(r)
}

/*
 * GvmsOrdemServicoAbrirOrdemServicoGet Method for GvmsOrdemServicoAbrirOrdemServicoGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsOrdemServicoAbrirOrdemServicoGetRequest
 */
func (a *OrdemServicoApiService) GvmsOrdemServicoAbrirOrdemServicoGet(ctx _context.Context) ApiGvmsOrdemServicoAbrirOrdemServicoGetRequest {
	return ApiGvmsOrdemServicoAbrirOrdemServicoGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AberturaOrdemServicoResultado
 */
func (a *OrdemServicoApiService) GvmsOrdemServicoAbrirOrdemServicoGetExecute(r ApiGvmsOrdemServicoAbrirOrdemServicoGetRequest) (AberturaOrdemServicoResultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AberturaOrdemServicoResultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdemServicoApiService.GvmsOrdemServicoAbrirOrdemServicoGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/OrdemServico/AbrirOrdemServico"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGvmsOrdemServicoDepositoPostRequest struct {
	ctx _context.Context
	ApiService *OrdemServicoApiService
	refOrdemServico *int64
	refCompartimento *int64
	refProduto *int64
}

func (r ApiGvmsOrdemServicoDepositoPostRequest) RefOrdemServico(refOrdemServico int64) ApiGvmsOrdemServicoDepositoPostRequest {
	r.refOrdemServico = &refOrdemServico
	return r
}
func (r ApiGvmsOrdemServicoDepositoPostRequest) RefCompartimento(refCompartimento int64) ApiGvmsOrdemServicoDepositoPostRequest {
	r.refCompartimento = &refCompartimento
	return r
}
func (r ApiGvmsOrdemServicoDepositoPostRequest) RefProduto(refProduto int64) ApiGvmsOrdemServicoDepositoPostRequest {
	r.refProduto = &refProduto
	return r
}

func (r ApiGvmsOrdemServicoDepositoPostRequest) Execute() (Resultado, *_nethttp.Response, error) {
	return r.ApiService.GvmsOrdemServicoDepositoPostExecute(r)
}

/*
 * GvmsOrdemServicoDepositoPost Method for GvmsOrdemServicoDepositoPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsOrdemServicoDepositoPostRequest
 */
func (a *OrdemServicoApiService) GvmsOrdemServicoDepositoPost(ctx _context.Context) ApiGvmsOrdemServicoDepositoPostRequest {
	return ApiGvmsOrdemServicoDepositoPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Resultado
 */
func (a *OrdemServicoApiService) GvmsOrdemServicoDepositoPostExecute(r ApiGvmsOrdemServicoDepositoPostRequest) (Resultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Resultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdemServicoApiService.GvmsOrdemServicoDepositoPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/OrdemServico/Deposito"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.refOrdemServico != nil {
		localVarQueryParams.Add("refOrdemServico", parameterToString(*r.refOrdemServico, ""))
	}
	if r.refCompartimento != nil {
		localVarQueryParams.Add("refCompartimento", parameterToString(*r.refCompartimento, ""))
	}
	if r.refProduto != nil {
		localVarQueryParams.Add("refProduto", parameterToString(*r.refProduto, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGvmsOrdemServicoFinalizarOrdemServicoPostRequest struct {
	ctx _context.Context
	ApiService *OrdemServicoApiService
	refOrdemSercico *int64
}

func (r ApiGvmsOrdemServicoFinalizarOrdemServicoPostRequest) RefOrdemSercico(refOrdemSercico int64) ApiGvmsOrdemServicoFinalizarOrdemServicoPostRequest {
	r.refOrdemSercico = &refOrdemSercico
	return r
}

func (r ApiGvmsOrdemServicoFinalizarOrdemServicoPostRequest) Execute() (Resultado, *_nethttp.Response, error) {
	return r.ApiService.GvmsOrdemServicoFinalizarOrdemServicoPostExecute(r)
}

/*
 * GvmsOrdemServicoFinalizarOrdemServicoPost Method for GvmsOrdemServicoFinalizarOrdemServicoPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsOrdemServicoFinalizarOrdemServicoPostRequest
 */
func (a *OrdemServicoApiService) GvmsOrdemServicoFinalizarOrdemServicoPost(ctx _context.Context) ApiGvmsOrdemServicoFinalizarOrdemServicoPostRequest {
	return ApiGvmsOrdemServicoFinalizarOrdemServicoPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Resultado
 */
func (a *OrdemServicoApiService) GvmsOrdemServicoFinalizarOrdemServicoPostExecute(r ApiGvmsOrdemServicoFinalizarOrdemServicoPostRequest) (Resultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Resultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdemServicoApiService.GvmsOrdemServicoFinalizarOrdemServicoPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/OrdemServico/FinalizarOrdemServico"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.refOrdemSercico != nil {
		localVarQueryParams.Add("refOrdemSercico", parameterToString(*r.refOrdemSercico, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGvmsOrdemServicoRecolhaPostRequest struct {
	ctx _context.Context
	ApiService *OrdemServicoApiService
	refOrdemSercico *int64
	requestBody *[]int64
}

func (r ApiGvmsOrdemServicoRecolhaPostRequest) RefOrdemSercico(refOrdemSercico int64) ApiGvmsOrdemServicoRecolhaPostRequest {
	r.refOrdemSercico = &refOrdemSercico
	return r
}
func (r ApiGvmsOrdemServicoRecolhaPostRequest) RequestBody(requestBody []int64) ApiGvmsOrdemServicoRecolhaPostRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiGvmsOrdemServicoRecolhaPostRequest) Execute() (Resultado, *_nethttp.Response, error) {
	return r.ApiService.GvmsOrdemServicoRecolhaPostExecute(r)
}

/*
 * GvmsOrdemServicoRecolhaPost Method for GvmsOrdemServicoRecolhaPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsOrdemServicoRecolhaPostRequest
 */
func (a *OrdemServicoApiService) GvmsOrdemServicoRecolhaPost(ctx _context.Context) ApiGvmsOrdemServicoRecolhaPostRequest {
	return ApiGvmsOrdemServicoRecolhaPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Resultado
 */
func (a *OrdemServicoApiService) GvmsOrdemServicoRecolhaPostExecute(r ApiGvmsOrdemServicoRecolhaPostRequest) (Resultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Resultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdemServicoApiService.GvmsOrdemServicoRecolhaPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/OrdemServico/Recolha"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.refOrdemSercico != nil {
		localVarQueryParams.Add("refOrdemSercico", parameterToString(*r.refOrdemSercico, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
