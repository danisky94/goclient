/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// PetroliferaApiService PetroliferaApi service
type PetroliferaApiService service

type ApiPetroliferasPetroliferaAnularVendaPostRequest struct {
	ctx _context.Context
	ApiService *PetroliferaApiService
	token *string
}

func (r ApiPetroliferasPetroliferaAnularVendaPostRequest) Token(token string) ApiPetroliferasPetroliferaAnularVendaPostRequest {
	r.token = &token
	return r
}

func (r ApiPetroliferasPetroliferaAnularVendaPostRequest) Execute() (Resultado, *_nethttp.Response, error) {
	return r.ApiService.PetroliferasPetroliferaAnularVendaPostExecute(r)
}

/*
 * PetroliferasPetroliferaAnularVendaPost Method for PetroliferasPetroliferaAnularVendaPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPetroliferasPetroliferaAnularVendaPostRequest
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaAnularVendaPost(ctx _context.Context) ApiPetroliferasPetroliferaAnularVendaPostRequest {
	return ApiPetroliferasPetroliferaAnularVendaPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Resultado
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaAnularVendaPostExecute(r ApiPetroliferasPetroliferaAnularVendaPostRequest) (Resultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Resultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PetroliferaApiService.PetroliferasPetroliferaAnularVendaPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Petroliferas/Petrolifera/AnularVenda"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPetroliferasPetroliferaCriarVendaPostRequest struct {
	ctx _context.Context
	ApiService *PetroliferaApiService
	vendaPetrolifera *[]VendaPetrolifera
}

func (r ApiPetroliferasPetroliferaCriarVendaPostRequest) VendaPetrolifera(vendaPetrolifera []VendaPetrolifera) ApiPetroliferasPetroliferaCriarVendaPostRequest {
	r.vendaPetrolifera = &vendaPetrolifera
	return r
}

func (r ApiPetroliferasPetroliferaCriarVendaPostRequest) Execute() (VendaPetroliferaListResultado, *_nethttp.Response, error) {
	return r.ApiService.PetroliferasPetroliferaCriarVendaPostExecute(r)
}

/*
 * PetroliferasPetroliferaCriarVendaPost Method for PetroliferasPetroliferaCriarVendaPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPetroliferasPetroliferaCriarVendaPostRequest
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaCriarVendaPost(ctx _context.Context) ApiPetroliferasPetroliferaCriarVendaPostRequest {
	return ApiPetroliferasPetroliferaCriarVendaPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return VendaPetroliferaListResultado
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaCriarVendaPostExecute(r ApiPetroliferasPetroliferaCriarVendaPostRequest) (VendaPetroliferaListResultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  VendaPetroliferaListResultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PetroliferaApiService.PetroliferasPetroliferaCriarVendaPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Petroliferas/Petrolifera/CriarVenda"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vendaPetrolifera
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPetroliferasPetroliferaDownloadImageGetRequest struct {
	ctx _context.Context
	ApiService *PetroliferaApiService
	refImagem *int64
}

func (r ApiPetroliferasPetroliferaDownloadImageGetRequest) RefImagem(refImagem int64) ApiPetroliferasPetroliferaDownloadImageGetRequest {
	r.refImagem = &refImagem
	return r
}

func (r ApiPetroliferasPetroliferaDownloadImageGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PetroliferasPetroliferaDownloadImageGetExecute(r)
}

/*
 * PetroliferasPetroliferaDownloadImageGet Method for PetroliferasPetroliferaDownloadImageGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPetroliferasPetroliferaDownloadImageGetRequest
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaDownloadImageGet(ctx _context.Context) ApiPetroliferasPetroliferaDownloadImageGetRequest {
	return ApiPetroliferasPetroliferaDownloadImageGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaDownloadImageGetExecute(r ApiPetroliferasPetroliferaDownloadImageGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PetroliferaApiService.PetroliferasPetroliferaDownloadImageGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Petroliferas/Petrolifera/DownloadImage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.refImagem != nil {
		localVarQueryParams.Add("refImagem", parameterToString(*r.refImagem, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPetroliferasPetroliferaGetDetalheLocalGetRequest struct {
	ctx _context.Context
	ApiService *PetroliferaApiService
	refProduto *int64
}

func (r ApiPetroliferasPetroliferaGetDetalheLocalGetRequest) RefProduto(refProduto int64) ApiPetroliferasPetroliferaGetDetalheLocalGetRequest {
	r.refProduto = &refProduto
	return r
}

func (r ApiPetroliferasPetroliferaGetDetalheLocalGetRequest) Execute() (LocalDTO, *_nethttp.Response, error) {
	return r.ApiService.PetroliferasPetroliferaGetDetalheLocalGetExecute(r)
}

/*
 * PetroliferasPetroliferaGetDetalheLocalGet Method for PetroliferasPetroliferaGetDetalheLocalGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPetroliferasPetroliferaGetDetalheLocalGetRequest
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetDetalheLocalGet(ctx _context.Context) ApiPetroliferasPetroliferaGetDetalheLocalGetRequest {
	return ApiPetroliferasPetroliferaGetDetalheLocalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return LocalDTO
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetDetalheLocalGetExecute(r ApiPetroliferasPetroliferaGetDetalheLocalGetRequest) (LocalDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LocalDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PetroliferaApiService.PetroliferasPetroliferaGetDetalheLocalGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Petroliferas/Petrolifera/GetDetalheLocal"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.refProduto != nil {
		localVarQueryParams.Add("refProduto", parameterToString(*r.refProduto, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPetroliferasPetroliferaGetGvmsGetRequest struct {
	ctx _context.Context
	ApiService *PetroliferaApiService
}


func (r ApiPetroliferasPetroliferaGetGvmsGetRequest) Execute() (GvmDTOListResultado, *_nethttp.Response, error) {
	return r.ApiService.PetroliferasPetroliferaGetGvmsGetExecute(r)
}

/*
 * PetroliferasPetroliferaGetGvmsGet Method for PetroliferasPetroliferaGetGvmsGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPetroliferasPetroliferaGetGvmsGetRequest
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetGvmsGet(ctx _context.Context) ApiPetroliferasPetroliferaGetGvmsGetRequest {
	return ApiPetroliferasPetroliferaGetGvmsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return GvmDTOListResultado
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetGvmsGetExecute(r ApiPetroliferasPetroliferaGetGvmsGetRequest) (GvmDTOListResultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GvmDTOListResultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PetroliferaApiService.PetroliferasPetroliferaGetGvmsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Petroliferas/Petrolifera/GetGvms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPetroliferasPetroliferaGetLocaisGetRequest struct {
	ctx _context.Context
	ApiService *PetroliferaApiService
}


func (r ApiPetroliferasPetroliferaGetLocaisGetRequest) Execute() (LocalDTOListResultado, *_nethttp.Response, error) {
	return r.ApiService.PetroliferasPetroliferaGetLocaisGetExecute(r)
}

/*
 * PetroliferasPetroliferaGetLocaisGet Method for PetroliferasPetroliferaGetLocaisGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPetroliferasPetroliferaGetLocaisGetRequest
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetLocaisGet(ctx _context.Context) ApiPetroliferasPetroliferaGetLocaisGetRequest {
	return ApiPetroliferasPetroliferaGetLocaisGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return LocalDTOListResultado
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetLocaisGetExecute(r ApiPetroliferasPetroliferaGetLocaisGetRequest) (LocalDTOListResultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LocalDTOListResultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PetroliferaApiService.PetroliferasPetroliferaGetLocaisGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Petroliferas/Petrolifera/GetLocais"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPetroliferasPetroliferaGetProdutoDetalheGetRequest struct {
	ctx _context.Context
	ApiService *PetroliferaApiService
	refProduto *int64
}

func (r ApiPetroliferasPetroliferaGetProdutoDetalheGetRequest) RefProduto(refProduto int64) ApiPetroliferasPetroliferaGetProdutoDetalheGetRequest {
	r.refProduto = &refProduto
	return r
}

func (r ApiPetroliferasPetroliferaGetProdutoDetalheGetRequest) Execute() (ProdutoDTO, *_nethttp.Response, error) {
	return r.ApiService.PetroliferasPetroliferaGetProdutoDetalheGetExecute(r)
}

/*
 * PetroliferasPetroliferaGetProdutoDetalheGet Method for PetroliferasPetroliferaGetProdutoDetalheGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPetroliferasPetroliferaGetProdutoDetalheGetRequest
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetProdutoDetalheGet(ctx _context.Context) ApiPetroliferasPetroliferaGetProdutoDetalheGetRequest {
	return ApiPetroliferasPetroliferaGetProdutoDetalheGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ProdutoDTO
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetProdutoDetalheGetExecute(r ApiPetroliferasPetroliferaGetProdutoDetalheGetRequest) (ProdutoDTO, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProdutoDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PetroliferaApiService.PetroliferasPetroliferaGetProdutoDetalheGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Petroliferas/Petrolifera/GetProdutoDetalhe"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.refProduto != nil {
		localVarQueryParams.Add("refProduto", parameterToString(*r.refProduto, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPetroliferasPetroliferaGetProdutosByTipoGetRequest struct {
	ctx _context.Context
	ApiService *PetroliferaApiService
	tipo *TipoProduto
}

func (r ApiPetroliferasPetroliferaGetProdutosByTipoGetRequest) Tipo(tipo TipoProduto) ApiPetroliferasPetroliferaGetProdutosByTipoGetRequest {
	r.tipo = &tipo
	return r
}

func (r ApiPetroliferasPetroliferaGetProdutosByTipoGetRequest) Execute() (ProdutoDTOListResultado, *_nethttp.Response, error) {
	return r.ApiService.PetroliferasPetroliferaGetProdutosByTipoGetExecute(r)
}

/*
 * PetroliferasPetroliferaGetProdutosByTipoGet Method for PetroliferasPetroliferaGetProdutosByTipoGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPetroliferasPetroliferaGetProdutosByTipoGetRequest
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetProdutosByTipoGet(ctx _context.Context) ApiPetroliferasPetroliferaGetProdutosByTipoGetRequest {
	return ApiPetroliferasPetroliferaGetProdutosByTipoGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ProdutoDTOListResultado
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetProdutosByTipoGetExecute(r ApiPetroliferasPetroliferaGetProdutosByTipoGetRequest) (ProdutoDTOListResultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProdutoDTOListResultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PetroliferaApiService.PetroliferasPetroliferaGetProdutosByTipoGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Petroliferas/Petrolifera/GetProdutosByTipo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tipo != nil {
		localVarQueryParams.Add("tipo", parameterToString(*r.tipo, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPetroliferasPetroliferaGetProdutosGetRequest struct {
	ctx _context.Context
	ApiService *PetroliferaApiService
}


func (r ApiPetroliferasPetroliferaGetProdutosGetRequest) Execute() (ProdutoDTOListResultado, *_nethttp.Response, error) {
	return r.ApiService.PetroliferasPetroliferaGetProdutosGetExecute(r)
}

/*
 * PetroliferasPetroliferaGetProdutosGet Method for PetroliferasPetroliferaGetProdutosGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPetroliferasPetroliferaGetProdutosGetRequest
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetProdutosGet(ctx _context.Context) ApiPetroliferasPetroliferaGetProdutosGetRequest {
	return ApiPetroliferasPetroliferaGetProdutosGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ProdutoDTOListResultado
 */
func (a *PetroliferaApiService) PetroliferasPetroliferaGetProdutosGetExecute(r ApiPetroliferasPetroliferaGetProdutosGetRequest) (ProdutoDTOListResultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProdutoDTOListResultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PetroliferaApiService.PetroliferasPetroliferaGetProdutosGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Petroliferas/Petrolifera/GetProdutos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
