/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TipoEntidade the model 'TipoEntidade'
type TipoEntidade int32

var allowedTipoEntidadeEnumValues = []TipoEntidade{
	0,
	1,
	2,
	3,
}

func (v *TipoEntidade) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TipoEntidade(value)
	for _, existing := range allowedTipoEntidadeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TipoEntidade", value)
}

// NewTipoEntidadeFromValue returns a pointer to a valid TipoEntidade
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTipoEntidadeFromValue(v int32) (*TipoEntidade, error) {
	ev := TipoEntidade(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TipoEntidade: valid values are %v", v, allowedTipoEntidadeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TipoEntidade) IsValid() bool {
	for _, existing := range allowedTipoEntidadeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TipoEntidade value
func (v TipoEntidade) Ptr() *TipoEntidade {
	return &v
}

type NullableTipoEntidade struct {
	value *TipoEntidade
	isSet bool
}

func (v NullableTipoEntidade) Get() *TipoEntidade {
	return v.value
}

func (v *NullableTipoEntidade) Set(val *TipoEntidade) {
	v.value = val
	v.isSet = true
}

func (v NullableTipoEntidade) IsSet() bool {
	return v.isSet
}

func (v *NullableTipoEntidade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTipoEntidade(val *TipoEntidade) *NullableTipoEntidade {
	return &NullableTipoEntidade{value: val, isSet: true}
}

func (v NullableTipoEntidade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTipoEntidade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

