/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Produto struct for Produto
type Produto struct {
	Id *int64 `json:"id,omitempty"`
	Deleted *int32 `json:"deleted,omitempty"`
	Upd NullableTime `json:"upd,omitempty"`
	Usr NullableInt64 `json:"usr,omitempty"`
	Nome NullableString `json:"nome,omitempty"`
	RefEntidade NullableInt64 `json:"refEntidade,omitempty"`
	Tipo *TipoProduto `json:"tipo,omitempty"`
	Descricao NullableString `json:"descricao,omitempty"`
	Preco NullableFloat64 `json:"preco,omitempty"`
	PresoTotal NullableString `json:"presoTotal,omitempty"`
	PesoLiquido NullableString `json:"pesoLiquido,omitempty"`
	Dimensoes NullableString `json:"dimensoes,omitempty"`
	RefImagem NullableInt64 `json:"refImagem,omitempty"`
	Imagem *Imagem `json:"imagem,omitempty"`
	CompartimentoHistoricos []CompartimentoHistorico `json:"compartimentoHistoricos,omitempty"`
	Compartimentos []Compartimento `json:"compartimentos,omitempty"`
	Vendas []Venda `json:"vendas,omitempty"`
	OrdemServicoProdutos []OrdemServicoProduto `json:"ordemServicoProdutos,omitempty"`
	OrdemServicoCompartimentos []OrdemServicoCompartimento `json:"ordemServicoCompartimentos,omitempty"`
}

// NewProduto instantiates a new Produto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProduto() *Produto {
	this := Produto{}
	return &this
}

// NewProdutoWithDefaults instantiates a new Produto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProdutoWithDefaults() *Produto {
	this := Produto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Produto) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Produto) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Produto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Produto) SetId(v int64) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Produto) GetDeleted() int32 {
	if o == nil || o.Deleted == nil {
		var ret int32
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Produto) GetDeletedOk() (*int32, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Produto) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int32 and assigns it to the Deleted field.
func (o *Produto) SetDeleted(v int32) {
	o.Deleted = &v
}

// GetUpd returns the Upd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetUpd() time.Time {
	if o == nil || o.Upd.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Upd.Get()
}

// GetUpdOk returns a tuple with the Upd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetUpdOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Upd.Get(), o.Upd.IsSet()
}

// HasUpd returns a boolean if a field has been set.
func (o *Produto) HasUpd() bool {
	if o != nil && o.Upd.IsSet() {
		return true
	}

	return false
}

// SetUpd gets a reference to the given NullableTime and assigns it to the Upd field.
func (o *Produto) SetUpd(v time.Time) {
	o.Upd.Set(&v)
}
// SetUpdNil sets the value for Upd to be an explicit nil
func (o *Produto) SetUpdNil() {
	o.Upd.Set(nil)
}

// UnsetUpd ensures that no value is present for Upd, not even an explicit nil
func (o *Produto) UnsetUpd() {
	o.Upd.Unset()
}

// GetUsr returns the Usr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetUsr() int64 {
	if o == nil || o.Usr.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Usr.Get()
}

// GetUsrOk returns a tuple with the Usr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetUsrOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Usr.Get(), o.Usr.IsSet()
}

// HasUsr returns a boolean if a field has been set.
func (o *Produto) HasUsr() bool {
	if o != nil && o.Usr.IsSet() {
		return true
	}

	return false
}

// SetUsr gets a reference to the given NullableInt64 and assigns it to the Usr field.
func (o *Produto) SetUsr(v int64) {
	o.Usr.Set(&v)
}
// SetUsrNil sets the value for Usr to be an explicit nil
func (o *Produto) SetUsrNil() {
	o.Usr.Set(nil)
}

// UnsetUsr ensures that no value is present for Usr, not even an explicit nil
func (o *Produto) UnsetUsr() {
	o.Usr.Unset()
}

// GetNome returns the Nome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetNome() string {
	if o == nil || o.Nome.Get() == nil {
		var ret string
		return ret
	}
	return *o.Nome.Get()
}

// GetNomeOk returns a tuple with the Nome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetNomeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Nome.Get(), o.Nome.IsSet()
}

// HasNome returns a boolean if a field has been set.
func (o *Produto) HasNome() bool {
	if o != nil && o.Nome.IsSet() {
		return true
	}

	return false
}

// SetNome gets a reference to the given NullableString and assigns it to the Nome field.
func (o *Produto) SetNome(v string) {
	o.Nome.Set(&v)
}
// SetNomeNil sets the value for Nome to be an explicit nil
func (o *Produto) SetNomeNil() {
	o.Nome.Set(nil)
}

// UnsetNome ensures that no value is present for Nome, not even an explicit nil
func (o *Produto) UnsetNome() {
	o.Nome.Unset()
}

// GetRefEntidade returns the RefEntidade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetRefEntidade() int64 {
	if o == nil || o.RefEntidade.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefEntidade.Get()
}

// GetRefEntidadeOk returns a tuple with the RefEntidade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetRefEntidadeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefEntidade.Get(), o.RefEntidade.IsSet()
}

// HasRefEntidade returns a boolean if a field has been set.
func (o *Produto) HasRefEntidade() bool {
	if o != nil && o.RefEntidade.IsSet() {
		return true
	}

	return false
}

// SetRefEntidade gets a reference to the given NullableInt64 and assigns it to the RefEntidade field.
func (o *Produto) SetRefEntidade(v int64) {
	o.RefEntidade.Set(&v)
}
// SetRefEntidadeNil sets the value for RefEntidade to be an explicit nil
func (o *Produto) SetRefEntidadeNil() {
	o.RefEntidade.Set(nil)
}

// UnsetRefEntidade ensures that no value is present for RefEntidade, not even an explicit nil
func (o *Produto) UnsetRefEntidade() {
	o.RefEntidade.Unset()
}

// GetTipo returns the Tipo field value if set, zero value otherwise.
func (o *Produto) GetTipo() TipoProduto {
	if o == nil || o.Tipo == nil {
		var ret TipoProduto
		return ret
	}
	return *o.Tipo
}

// GetTipoOk returns a tuple with the Tipo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Produto) GetTipoOk() (*TipoProduto, bool) {
	if o == nil || o.Tipo == nil {
		return nil, false
	}
	return o.Tipo, true
}

// HasTipo returns a boolean if a field has been set.
func (o *Produto) HasTipo() bool {
	if o != nil && o.Tipo != nil {
		return true
	}

	return false
}

// SetTipo gets a reference to the given TipoProduto and assigns it to the Tipo field.
func (o *Produto) SetTipo(v TipoProduto) {
	o.Tipo = &v
}

// GetDescricao returns the Descricao field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetDescricao() string {
	if o == nil || o.Descricao.Get() == nil {
		var ret string
		return ret
	}
	return *o.Descricao.Get()
}

// GetDescricaoOk returns a tuple with the Descricao field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetDescricaoOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Descricao.Get(), o.Descricao.IsSet()
}

// HasDescricao returns a boolean if a field has been set.
func (o *Produto) HasDescricao() bool {
	if o != nil && o.Descricao.IsSet() {
		return true
	}

	return false
}

// SetDescricao gets a reference to the given NullableString and assigns it to the Descricao field.
func (o *Produto) SetDescricao(v string) {
	o.Descricao.Set(&v)
}
// SetDescricaoNil sets the value for Descricao to be an explicit nil
func (o *Produto) SetDescricaoNil() {
	o.Descricao.Set(nil)
}

// UnsetDescricao ensures that no value is present for Descricao, not even an explicit nil
func (o *Produto) UnsetDescricao() {
	o.Descricao.Unset()
}

// GetPreco returns the Preco field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetPreco() float64 {
	if o == nil || o.Preco.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Preco.Get()
}

// GetPrecoOk returns a tuple with the Preco field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetPrecoOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Preco.Get(), o.Preco.IsSet()
}

// HasPreco returns a boolean if a field has been set.
func (o *Produto) HasPreco() bool {
	if o != nil && o.Preco.IsSet() {
		return true
	}

	return false
}

// SetPreco gets a reference to the given NullableFloat64 and assigns it to the Preco field.
func (o *Produto) SetPreco(v float64) {
	o.Preco.Set(&v)
}
// SetPrecoNil sets the value for Preco to be an explicit nil
func (o *Produto) SetPrecoNil() {
	o.Preco.Set(nil)
}

// UnsetPreco ensures that no value is present for Preco, not even an explicit nil
func (o *Produto) UnsetPreco() {
	o.Preco.Unset()
}

// GetPresoTotal returns the PresoTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetPresoTotal() string {
	if o == nil || o.PresoTotal.Get() == nil {
		var ret string
		return ret
	}
	return *o.PresoTotal.Get()
}

// GetPresoTotalOk returns a tuple with the PresoTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetPresoTotalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PresoTotal.Get(), o.PresoTotal.IsSet()
}

// HasPresoTotal returns a boolean if a field has been set.
func (o *Produto) HasPresoTotal() bool {
	if o != nil && o.PresoTotal.IsSet() {
		return true
	}

	return false
}

// SetPresoTotal gets a reference to the given NullableString and assigns it to the PresoTotal field.
func (o *Produto) SetPresoTotal(v string) {
	o.PresoTotal.Set(&v)
}
// SetPresoTotalNil sets the value for PresoTotal to be an explicit nil
func (o *Produto) SetPresoTotalNil() {
	o.PresoTotal.Set(nil)
}

// UnsetPresoTotal ensures that no value is present for PresoTotal, not even an explicit nil
func (o *Produto) UnsetPresoTotal() {
	o.PresoTotal.Unset()
}

// GetPesoLiquido returns the PesoLiquido field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetPesoLiquido() string {
	if o == nil || o.PesoLiquido.Get() == nil {
		var ret string
		return ret
	}
	return *o.PesoLiquido.Get()
}

// GetPesoLiquidoOk returns a tuple with the PesoLiquido field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetPesoLiquidoOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PesoLiquido.Get(), o.PesoLiquido.IsSet()
}

// HasPesoLiquido returns a boolean if a field has been set.
func (o *Produto) HasPesoLiquido() bool {
	if o != nil && o.PesoLiquido.IsSet() {
		return true
	}

	return false
}

// SetPesoLiquido gets a reference to the given NullableString and assigns it to the PesoLiquido field.
func (o *Produto) SetPesoLiquido(v string) {
	o.PesoLiquido.Set(&v)
}
// SetPesoLiquidoNil sets the value for PesoLiquido to be an explicit nil
func (o *Produto) SetPesoLiquidoNil() {
	o.PesoLiquido.Set(nil)
}

// UnsetPesoLiquido ensures that no value is present for PesoLiquido, not even an explicit nil
func (o *Produto) UnsetPesoLiquido() {
	o.PesoLiquido.Unset()
}

// GetDimensoes returns the Dimensoes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetDimensoes() string {
	if o == nil || o.Dimensoes.Get() == nil {
		var ret string
		return ret
	}
	return *o.Dimensoes.Get()
}

// GetDimensoesOk returns a tuple with the Dimensoes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetDimensoesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Dimensoes.Get(), o.Dimensoes.IsSet()
}

// HasDimensoes returns a boolean if a field has been set.
func (o *Produto) HasDimensoes() bool {
	if o != nil && o.Dimensoes.IsSet() {
		return true
	}

	return false
}

// SetDimensoes gets a reference to the given NullableString and assigns it to the Dimensoes field.
func (o *Produto) SetDimensoes(v string) {
	o.Dimensoes.Set(&v)
}
// SetDimensoesNil sets the value for Dimensoes to be an explicit nil
func (o *Produto) SetDimensoesNil() {
	o.Dimensoes.Set(nil)
}

// UnsetDimensoes ensures that no value is present for Dimensoes, not even an explicit nil
func (o *Produto) UnsetDimensoes() {
	o.Dimensoes.Unset()
}

// GetRefImagem returns the RefImagem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetRefImagem() int64 {
	if o == nil || o.RefImagem.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefImagem.Get()
}

// GetRefImagemOk returns a tuple with the RefImagem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetRefImagemOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefImagem.Get(), o.RefImagem.IsSet()
}

// HasRefImagem returns a boolean if a field has been set.
func (o *Produto) HasRefImagem() bool {
	if o != nil && o.RefImagem.IsSet() {
		return true
	}

	return false
}

// SetRefImagem gets a reference to the given NullableInt64 and assigns it to the RefImagem field.
func (o *Produto) SetRefImagem(v int64) {
	o.RefImagem.Set(&v)
}
// SetRefImagemNil sets the value for RefImagem to be an explicit nil
func (o *Produto) SetRefImagemNil() {
	o.RefImagem.Set(nil)
}

// UnsetRefImagem ensures that no value is present for RefImagem, not even an explicit nil
func (o *Produto) UnsetRefImagem() {
	o.RefImagem.Unset()
}

// GetImagem returns the Imagem field value if set, zero value otherwise.
func (o *Produto) GetImagem() Imagem {
	if o == nil || o.Imagem == nil {
		var ret Imagem
		return ret
	}
	return *o.Imagem
}

// GetImagemOk returns a tuple with the Imagem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Produto) GetImagemOk() (*Imagem, bool) {
	if o == nil || o.Imagem == nil {
		return nil, false
	}
	return o.Imagem, true
}

// HasImagem returns a boolean if a field has been set.
func (o *Produto) HasImagem() bool {
	if o != nil && o.Imagem != nil {
		return true
	}

	return false
}

// SetImagem gets a reference to the given Imagem and assigns it to the Imagem field.
func (o *Produto) SetImagem(v Imagem) {
	o.Imagem = &v
}

// GetCompartimentoHistoricos returns the CompartimentoHistoricos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetCompartimentoHistoricos() []CompartimentoHistorico {
	if o == nil  {
		var ret []CompartimentoHistorico
		return ret
	}
	return o.CompartimentoHistoricos
}

// GetCompartimentoHistoricosOk returns a tuple with the CompartimentoHistoricos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetCompartimentoHistoricosOk() (*[]CompartimentoHistorico, bool) {
	if o == nil || o.CompartimentoHistoricos == nil {
		return nil, false
	}
	return &o.CompartimentoHistoricos, true
}

// HasCompartimentoHistoricos returns a boolean if a field has been set.
func (o *Produto) HasCompartimentoHistoricos() bool {
	if o != nil && o.CompartimentoHistoricos != nil {
		return true
	}

	return false
}

// SetCompartimentoHistoricos gets a reference to the given []CompartimentoHistorico and assigns it to the CompartimentoHistoricos field.
func (o *Produto) SetCompartimentoHistoricos(v []CompartimentoHistorico) {
	o.CompartimentoHistoricos = v
}

// GetCompartimentos returns the Compartimentos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetCompartimentos() []Compartimento {
	if o == nil  {
		var ret []Compartimento
		return ret
	}
	return o.Compartimentos
}

// GetCompartimentosOk returns a tuple with the Compartimentos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetCompartimentosOk() (*[]Compartimento, bool) {
	if o == nil || o.Compartimentos == nil {
		return nil, false
	}
	return &o.Compartimentos, true
}

// HasCompartimentos returns a boolean if a field has been set.
func (o *Produto) HasCompartimentos() bool {
	if o != nil && o.Compartimentos != nil {
		return true
	}

	return false
}

// SetCompartimentos gets a reference to the given []Compartimento and assigns it to the Compartimentos field.
func (o *Produto) SetCompartimentos(v []Compartimento) {
	o.Compartimentos = v
}

// GetVendas returns the Vendas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetVendas() []Venda {
	if o == nil  {
		var ret []Venda
		return ret
	}
	return o.Vendas
}

// GetVendasOk returns a tuple with the Vendas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetVendasOk() (*[]Venda, bool) {
	if o == nil || o.Vendas == nil {
		return nil, false
	}
	return &o.Vendas, true
}

// HasVendas returns a boolean if a field has been set.
func (o *Produto) HasVendas() bool {
	if o != nil && o.Vendas != nil {
		return true
	}

	return false
}

// SetVendas gets a reference to the given []Venda and assigns it to the Vendas field.
func (o *Produto) SetVendas(v []Venda) {
	o.Vendas = v
}

// GetOrdemServicoProdutos returns the OrdemServicoProdutos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetOrdemServicoProdutos() []OrdemServicoProduto {
	if o == nil  {
		var ret []OrdemServicoProduto
		return ret
	}
	return o.OrdemServicoProdutos
}

// GetOrdemServicoProdutosOk returns a tuple with the OrdemServicoProdutos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetOrdemServicoProdutosOk() (*[]OrdemServicoProduto, bool) {
	if o == nil || o.OrdemServicoProdutos == nil {
		return nil, false
	}
	return &o.OrdemServicoProdutos, true
}

// HasOrdemServicoProdutos returns a boolean if a field has been set.
func (o *Produto) HasOrdemServicoProdutos() bool {
	if o != nil && o.OrdemServicoProdutos != nil {
		return true
	}

	return false
}

// SetOrdemServicoProdutos gets a reference to the given []OrdemServicoProduto and assigns it to the OrdemServicoProdutos field.
func (o *Produto) SetOrdemServicoProdutos(v []OrdemServicoProduto) {
	o.OrdemServicoProdutos = v
}

// GetOrdemServicoCompartimentos returns the OrdemServicoCompartimentos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Produto) GetOrdemServicoCompartimentos() []OrdemServicoCompartimento {
	if o == nil  {
		var ret []OrdemServicoCompartimento
		return ret
	}
	return o.OrdemServicoCompartimentos
}

// GetOrdemServicoCompartimentosOk returns a tuple with the OrdemServicoCompartimentos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Produto) GetOrdemServicoCompartimentosOk() (*[]OrdemServicoCompartimento, bool) {
	if o == nil || o.OrdemServicoCompartimentos == nil {
		return nil, false
	}
	return &o.OrdemServicoCompartimentos, true
}

// HasOrdemServicoCompartimentos returns a boolean if a field has been set.
func (o *Produto) HasOrdemServicoCompartimentos() bool {
	if o != nil && o.OrdemServicoCompartimentos != nil {
		return true
	}

	return false
}

// SetOrdemServicoCompartimentos gets a reference to the given []OrdemServicoCompartimento and assigns it to the OrdemServicoCompartimentos field.
func (o *Produto) SetOrdemServicoCompartimentos(v []OrdemServicoCompartimento) {
	o.OrdemServicoCompartimentos = v
}

func (o Produto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Upd.IsSet() {
		toSerialize["upd"] = o.Upd.Get()
	}
	if o.Usr.IsSet() {
		toSerialize["usr"] = o.Usr.Get()
	}
	if o.Nome.IsSet() {
		toSerialize["nome"] = o.Nome.Get()
	}
	if o.RefEntidade.IsSet() {
		toSerialize["refEntidade"] = o.RefEntidade.Get()
	}
	if o.Tipo != nil {
		toSerialize["tipo"] = o.Tipo
	}
	if o.Descricao.IsSet() {
		toSerialize["descricao"] = o.Descricao.Get()
	}
	if o.Preco.IsSet() {
		toSerialize["preco"] = o.Preco.Get()
	}
	if o.PresoTotal.IsSet() {
		toSerialize["presoTotal"] = o.PresoTotal.Get()
	}
	if o.PesoLiquido.IsSet() {
		toSerialize["pesoLiquido"] = o.PesoLiquido.Get()
	}
	if o.Dimensoes.IsSet() {
		toSerialize["dimensoes"] = o.Dimensoes.Get()
	}
	if o.RefImagem.IsSet() {
		toSerialize["refImagem"] = o.RefImagem.Get()
	}
	if o.Imagem != nil {
		toSerialize["imagem"] = o.Imagem
	}
	if o.CompartimentoHistoricos != nil {
		toSerialize["compartimentoHistoricos"] = o.CompartimentoHistoricos
	}
	if o.Compartimentos != nil {
		toSerialize["compartimentos"] = o.Compartimentos
	}
	if o.Vendas != nil {
		toSerialize["vendas"] = o.Vendas
	}
	if o.OrdemServicoProdutos != nil {
		toSerialize["ordemServicoProdutos"] = o.OrdemServicoProdutos
	}
	if o.OrdemServicoCompartimentos != nil {
		toSerialize["ordemServicoCompartimentos"] = o.OrdemServicoCompartimentos
	}
	return json.Marshal(toSerialize)
}

type NullableProduto struct {
	value *Produto
	isSet bool
}

func (v NullableProduto) Get() *Produto {
	return v.value
}

func (v *NullableProduto) Set(val *Produto) {
	v.value = val
	v.isSet = true
}

func (v NullableProduto) IsSet() bool {
	return v.isSet
}

func (v *NullableProduto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduto(val *Produto) *NullableProduto {
	return &NullableProduto{value: val, isSet: true}
}

func (v NullableProduto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProduto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


