/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// RaspberryPi struct for RaspberryPi
type RaspberryPi struct {
	Id *int64 `json:"id,omitempty"`
	Deleted *int32 `json:"deleted,omitempty"`
	Upd NullableTime `json:"upd,omitempty"`
	Usr NullableInt64 `json:"usr,omitempty"`
	Identificador NullableString `json:"identificador,omitempty"`
	Gvm *Gvm `json:"gvm,omitempty"`
}

// NewRaspberryPi instantiates a new RaspberryPi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRaspberryPi() *RaspberryPi {
	this := RaspberryPi{}
	return &this
}

// NewRaspberryPiWithDefaults instantiates a new RaspberryPi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRaspberryPiWithDefaults() *RaspberryPi {
	this := RaspberryPi{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RaspberryPi) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RaspberryPi) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RaspberryPi) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RaspberryPi) SetId(v int64) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *RaspberryPi) GetDeleted() int32 {
	if o == nil || o.Deleted == nil {
		var ret int32
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RaspberryPi) GetDeletedOk() (*int32, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *RaspberryPi) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int32 and assigns it to the Deleted field.
func (o *RaspberryPi) SetDeleted(v int32) {
	o.Deleted = &v
}

// GetUpd returns the Upd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RaspberryPi) GetUpd() time.Time {
	if o == nil || o.Upd.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Upd.Get()
}

// GetUpdOk returns a tuple with the Upd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RaspberryPi) GetUpdOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Upd.Get(), o.Upd.IsSet()
}

// HasUpd returns a boolean if a field has been set.
func (o *RaspberryPi) HasUpd() bool {
	if o != nil && o.Upd.IsSet() {
		return true
	}

	return false
}

// SetUpd gets a reference to the given NullableTime and assigns it to the Upd field.
func (o *RaspberryPi) SetUpd(v time.Time) {
	o.Upd.Set(&v)
}
// SetUpdNil sets the value for Upd to be an explicit nil
func (o *RaspberryPi) SetUpdNil() {
	o.Upd.Set(nil)
}

// UnsetUpd ensures that no value is present for Upd, not even an explicit nil
func (o *RaspberryPi) UnsetUpd() {
	o.Upd.Unset()
}

// GetUsr returns the Usr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RaspberryPi) GetUsr() int64 {
	if o == nil || o.Usr.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Usr.Get()
}

// GetUsrOk returns a tuple with the Usr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RaspberryPi) GetUsrOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Usr.Get(), o.Usr.IsSet()
}

// HasUsr returns a boolean if a field has been set.
func (o *RaspberryPi) HasUsr() bool {
	if o != nil && o.Usr.IsSet() {
		return true
	}

	return false
}

// SetUsr gets a reference to the given NullableInt64 and assigns it to the Usr field.
func (o *RaspberryPi) SetUsr(v int64) {
	o.Usr.Set(&v)
}
// SetUsrNil sets the value for Usr to be an explicit nil
func (o *RaspberryPi) SetUsrNil() {
	o.Usr.Set(nil)
}

// UnsetUsr ensures that no value is present for Usr, not even an explicit nil
func (o *RaspberryPi) UnsetUsr() {
	o.Usr.Unset()
}

// GetIdentificador returns the Identificador field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RaspberryPi) GetIdentificador() string {
	if o == nil || o.Identificador.Get() == nil {
		var ret string
		return ret
	}
	return *o.Identificador.Get()
}

// GetIdentificadorOk returns a tuple with the Identificador field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RaspberryPi) GetIdentificadorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Identificador.Get(), o.Identificador.IsSet()
}

// HasIdentificador returns a boolean if a field has been set.
func (o *RaspberryPi) HasIdentificador() bool {
	if o != nil && o.Identificador.IsSet() {
		return true
	}

	return false
}

// SetIdentificador gets a reference to the given NullableString and assigns it to the Identificador field.
func (o *RaspberryPi) SetIdentificador(v string) {
	o.Identificador.Set(&v)
}
// SetIdentificadorNil sets the value for Identificador to be an explicit nil
func (o *RaspberryPi) SetIdentificadorNil() {
	o.Identificador.Set(nil)
}

// UnsetIdentificador ensures that no value is present for Identificador, not even an explicit nil
func (o *RaspberryPi) UnsetIdentificador() {
	o.Identificador.Unset()
}

// GetGvm returns the Gvm field value if set, zero value otherwise.
func (o *RaspberryPi) GetGvm() Gvm {
	if o == nil || o.Gvm == nil {
		var ret Gvm
		return ret
	}
	return *o.Gvm
}

// GetGvmOk returns a tuple with the Gvm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RaspberryPi) GetGvmOk() (*Gvm, bool) {
	if o == nil || o.Gvm == nil {
		return nil, false
	}
	return o.Gvm, true
}

// HasGvm returns a boolean if a field has been set.
func (o *RaspberryPi) HasGvm() bool {
	if o != nil && o.Gvm != nil {
		return true
	}

	return false
}

// SetGvm gets a reference to the given Gvm and assigns it to the Gvm field.
func (o *RaspberryPi) SetGvm(v Gvm) {
	o.Gvm = &v
}

func (o RaspberryPi) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Upd.IsSet() {
		toSerialize["upd"] = o.Upd.Get()
	}
	if o.Usr.IsSet() {
		toSerialize["usr"] = o.Usr.Get()
	}
	if o.Identificador.IsSet() {
		toSerialize["identificador"] = o.Identificador.Get()
	}
	if o.Gvm != nil {
		toSerialize["gvm"] = o.Gvm
	}
	return json.Marshal(toSerialize)
}

type NullableRaspberryPi struct {
	value *RaspberryPi
	isSet bool
}

func (v NullableRaspberryPi) Get() *RaspberryPi {
	return v.value
}

func (v *NullableRaspberryPi) Set(val *RaspberryPi) {
	v.value = val
	v.isSet = true
}

func (v NullableRaspberryPi) IsSet() bool {
	return v.isSet
}

func (v *NullableRaspberryPi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRaspberryPi(val *RaspberryPi) *NullableRaspberryPi {
	return &NullableRaspberryPi{value: val, isSet: true}
}

func (v NullableRaspberryPi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRaspberryPi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


