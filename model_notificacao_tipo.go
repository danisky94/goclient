/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NotificacaoTipo the model 'NotificacaoTipo'
type NotificacaoTipo int32


var allowedNotificacaoTipoEnumValues = []NotificacaoTipo{
	0,
	1,
}

func (v *NotificacaoTipo) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificacaoTipo(value)
	for _, existing := range allowedNotificacaoTipoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificacaoTipo", value)
}

// NewNotificacaoTipoFromValue returns a pointer to a valid NotificacaoTipo
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificacaoTipoFromValue(v int32) (*NotificacaoTipo, error) {
	ev := NotificacaoTipo(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificacaoTipo: valid values are %v", v, allowedNotificacaoTipoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificacaoTipo) IsValid() bool {
	for _, existing := range allowedNotificacaoTipoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificacaoTipo value
func (v NotificacaoTipo) Ptr() *NotificacaoTipo {
	return &v
}

type NullableNotificacaoTipo struct {
	value *NotificacaoTipo
	isSet bool
}

func (v NullableNotificacaoTipo) Get() *NotificacaoTipo {
	return v.value
}

func (v *NullableNotificacaoTipo) Set(val *NotificacaoTipo) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificacaoTipo) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificacaoTipo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificacaoTipo(val *NotificacaoTipo) *NullableNotificacaoTipo {
	return &NullableNotificacaoTipo{value: val, isSet: true}
}

func (v NullableNotificacaoTipo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificacaoTipo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

