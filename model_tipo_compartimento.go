/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TipoCompartimento the model 'TipoCompartimento'
type TipoCompartimento int32



var allowedTipoCompartimentoEnumValues = []TipoCompartimento{
	0,
	1,
}

func (v *TipoCompartimento) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TipoCompartimento(value)
	for _, existing := range allowedTipoCompartimentoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TipoCompartimento", value)
}

// NewTipoCompartimentoFromValue returns a pointer to a valid TipoCompartimento
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTipoCompartimentoFromValue(v int32) (*TipoCompartimento, error) {
	ev := TipoCompartimento(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TipoCompartimento: valid values are %v", v, allowedTipoCompartimentoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TipoCompartimento) IsValid() bool {
	for _, existing := range allowedTipoCompartimentoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TipoCompartimento value
func (v TipoCompartimento) Ptr() *TipoCompartimento {
	return &v
}

type NullableTipoCompartimento struct {
	value *TipoCompartimento
	isSet bool
}

func (v NullableTipoCompartimento) Get() *TipoCompartimento {
	return v.value
}

func (v *NullableTipoCompartimento) Set(val *TipoCompartimento) {
	v.value = val
	v.isSet = true
}

func (v NullableTipoCompartimento) IsSet() bool {
	return v.isSet
}

func (v *NullableTipoCompartimento) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTipoCompartimento(val *TipoCompartimento) *NullableTipoCompartimento {
	return &NullableTipoCompartimento{value: val, isSet: true}
}

func (v NullableTipoCompartimento) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTipoCompartimento) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

