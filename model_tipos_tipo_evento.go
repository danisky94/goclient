/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TiposTipoEvento the model 'TiposTipoEvento'
type TiposTipoEvento int32


var allowedTiposTipoEventoEnumValues = []TiposTipoEvento{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
}

func (v *TiposTipoEvento) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TiposTipoEvento(value)
	for _, existing := range allowedTiposTipoEventoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TiposTipoEvento", value)
}

// NewTiposTipoEventoFromValue returns a pointer to a valid TiposTipoEvento
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTiposTipoEventoFromValue(v int32) (*TiposTipoEvento, error) {
	ev := TiposTipoEvento(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TiposTipoEvento: valid values are %v", v, allowedTiposTipoEventoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TiposTipoEvento) IsValid() bool {
	for _, existing := range allowedTiposTipoEventoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TiposTipoEvento value
func (v TiposTipoEvento) Ptr() *TiposTipoEvento {
	return &v
}

type NullableTiposTipoEvento struct {
	value *TiposTipoEvento
	isSet bool
}

func (v NullableTiposTipoEvento) Get() *TiposTipoEvento {
	return v.value
}

func (v *NullableTiposTipoEvento) Set(val *TiposTipoEvento) {
	v.value = val
	v.isSet = true
}

func (v NullableTiposTipoEvento) IsSet() bool {
	return v.isSet
}

func (v *NullableTiposTipoEvento) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTiposTipoEvento(val *TiposTipoEvento) *NullableTiposTipoEvento {
	return &NullableTiposTipoEvento{value: val, isSet: true}
}

func (v NullableTiposTipoEvento) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTiposTipoEvento) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

