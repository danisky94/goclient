/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Evento struct for Evento
type Evento struct {
	Id *int64 `json:"id,omitempty"`
	Deleted *int32 `json:"deleted,omitempty"`
	Upd NullableTime `json:"upd,omitempty"`
	Usr NullableInt64 `json:"usr,omitempty"`
	RefTipoEvento NullableInt64 `json:"refTipoEvento,omitempty"`
	RefCompartimento NullableInt64 `json:"refCompartimento,omitempty"`
	Data NullableTime `json:"data,omitempty"`
	Mensagem NullableString `json:"mensagem,omitempty"`
	RefGvm NullableInt64 `json:"refGvm,omitempty"`
	Gvm *Gvm `json:"gvm,omitempty"`
	TipoEvento *TipoEvento `json:"tipoEvento,omitempty"`
	Compartimento *Compartimento `json:"compartimento,omitempty"`
}

// NewEvento instantiates a new Evento object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvento() *Evento {
	this := Evento{}
	return &this
}

// NewEventoWithDefaults instantiates a new Evento object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventoWithDefaults() *Evento {
	this := Evento{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Evento) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evento) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Evento) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Evento) SetId(v int64) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Evento) GetDeleted() int32 {
	if o == nil || o.Deleted == nil {
		var ret int32
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evento) GetDeletedOk() (*int32, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Evento) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given int32 and assigns it to the Deleted field.
func (o *Evento) SetDeleted(v int32) {
	o.Deleted = &v
}

// GetUpd returns the Upd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Evento) GetUpd() time.Time {
	if o == nil || o.Upd.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Upd.Get()
}

// GetUpdOk returns a tuple with the Upd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Evento) GetUpdOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Upd.Get(), o.Upd.IsSet()
}

// HasUpd returns a boolean if a field has been set.
func (o *Evento) HasUpd() bool {
	if o != nil && o.Upd.IsSet() {
		return true
	}

	return false
}

// SetUpd gets a reference to the given NullableTime and assigns it to the Upd field.
func (o *Evento) SetUpd(v time.Time) {
	o.Upd.Set(&v)
}
// SetUpdNil sets the value for Upd to be an explicit nil
func (o *Evento) SetUpdNil() {
	o.Upd.Set(nil)
}

// UnsetUpd ensures that no value is present for Upd, not even an explicit nil
func (o *Evento) UnsetUpd() {
	o.Upd.Unset()
}

// GetUsr returns the Usr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Evento) GetUsr() int64 {
	if o == nil || o.Usr.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Usr.Get()
}

// GetUsrOk returns a tuple with the Usr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Evento) GetUsrOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Usr.Get(), o.Usr.IsSet()
}

// HasUsr returns a boolean if a field has been set.
func (o *Evento) HasUsr() bool {
	if o != nil && o.Usr.IsSet() {
		return true
	}

	return false
}

// SetUsr gets a reference to the given NullableInt64 and assigns it to the Usr field.
func (o *Evento) SetUsr(v int64) {
	o.Usr.Set(&v)
}
// SetUsrNil sets the value for Usr to be an explicit nil
func (o *Evento) SetUsrNil() {
	o.Usr.Set(nil)
}

// UnsetUsr ensures that no value is present for Usr, not even an explicit nil
func (o *Evento) UnsetUsr() {
	o.Usr.Unset()
}

// GetRefTipoEvento returns the RefTipoEvento field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Evento) GetRefTipoEvento() int64 {
	if o == nil || o.RefTipoEvento.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefTipoEvento.Get()
}

// GetRefTipoEventoOk returns a tuple with the RefTipoEvento field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Evento) GetRefTipoEventoOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefTipoEvento.Get(), o.RefTipoEvento.IsSet()
}

// HasRefTipoEvento returns a boolean if a field has been set.
func (o *Evento) HasRefTipoEvento() bool {
	if o != nil && o.RefTipoEvento.IsSet() {
		return true
	}

	return false
}

// SetRefTipoEvento gets a reference to the given NullableInt64 and assigns it to the RefTipoEvento field.
func (o *Evento) SetRefTipoEvento(v int64) {
	o.RefTipoEvento.Set(&v)
}
// SetRefTipoEventoNil sets the value for RefTipoEvento to be an explicit nil
func (o *Evento) SetRefTipoEventoNil() {
	o.RefTipoEvento.Set(nil)
}

// UnsetRefTipoEvento ensures that no value is present for RefTipoEvento, not even an explicit nil
func (o *Evento) UnsetRefTipoEvento() {
	o.RefTipoEvento.Unset()
}

// GetRefCompartimento returns the RefCompartimento field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Evento) GetRefCompartimento() int64 {
	if o == nil || o.RefCompartimento.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefCompartimento.Get()
}

// GetRefCompartimentoOk returns a tuple with the RefCompartimento field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Evento) GetRefCompartimentoOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefCompartimento.Get(), o.RefCompartimento.IsSet()
}

// HasRefCompartimento returns a boolean if a field has been set.
func (o *Evento) HasRefCompartimento() bool {
	if o != nil && o.RefCompartimento.IsSet() {
		return true
	}

	return false
}

// SetRefCompartimento gets a reference to the given NullableInt64 and assigns it to the RefCompartimento field.
func (o *Evento) SetRefCompartimento(v int64) {
	o.RefCompartimento.Set(&v)
}
// SetRefCompartimentoNil sets the value for RefCompartimento to be an explicit nil
func (o *Evento) SetRefCompartimentoNil() {
	o.RefCompartimento.Set(nil)
}

// UnsetRefCompartimento ensures that no value is present for RefCompartimento, not even an explicit nil
func (o *Evento) UnsetRefCompartimento() {
	o.RefCompartimento.Unset()
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Evento) GetData() time.Time {
	if o == nil || o.Data.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Data.Get()
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Evento) GetDataOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Data.Get(), o.Data.IsSet()
}

// HasData returns a boolean if a field has been set.
func (o *Evento) HasData() bool {
	if o != nil && o.Data.IsSet() {
		return true
	}

	return false
}

// SetData gets a reference to the given NullableTime and assigns it to the Data field.
func (o *Evento) SetData(v time.Time) {
	o.Data.Set(&v)
}
// SetDataNil sets the value for Data to be an explicit nil
func (o *Evento) SetDataNil() {
	o.Data.Set(nil)
}

// UnsetData ensures that no value is present for Data, not even an explicit nil
func (o *Evento) UnsetData() {
	o.Data.Unset()
}

// GetMensagem returns the Mensagem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Evento) GetMensagem() string {
	if o == nil || o.Mensagem.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mensagem.Get()
}

// GetMensagemOk returns a tuple with the Mensagem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Evento) GetMensagemOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mensagem.Get(), o.Mensagem.IsSet()
}

// HasMensagem returns a boolean if a field has been set.
func (o *Evento) HasMensagem() bool {
	if o != nil && o.Mensagem.IsSet() {
		return true
	}

	return false
}

// SetMensagem gets a reference to the given NullableString and assigns it to the Mensagem field.
func (o *Evento) SetMensagem(v string) {
	o.Mensagem.Set(&v)
}
// SetMensagemNil sets the value for Mensagem to be an explicit nil
func (o *Evento) SetMensagemNil() {
	o.Mensagem.Set(nil)
}

// UnsetMensagem ensures that no value is present for Mensagem, not even an explicit nil
func (o *Evento) UnsetMensagem() {
	o.Mensagem.Unset()
}

// GetRefGvm returns the RefGvm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Evento) GetRefGvm() int64 {
	if o == nil || o.RefGvm.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefGvm.Get()
}

// GetRefGvmOk returns a tuple with the RefGvm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Evento) GetRefGvmOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefGvm.Get(), o.RefGvm.IsSet()
}

// HasRefGvm returns a boolean if a field has been set.
func (o *Evento) HasRefGvm() bool {
	if o != nil && o.RefGvm.IsSet() {
		return true
	}

	return false
}

// SetRefGvm gets a reference to the given NullableInt64 and assigns it to the RefGvm field.
func (o *Evento) SetRefGvm(v int64) {
	o.RefGvm.Set(&v)
}
// SetRefGvmNil sets the value for RefGvm to be an explicit nil
func (o *Evento) SetRefGvmNil() {
	o.RefGvm.Set(nil)
}

// UnsetRefGvm ensures that no value is present for RefGvm, not even an explicit nil
func (o *Evento) UnsetRefGvm() {
	o.RefGvm.Unset()
}

// GetGvm returns the Gvm field value if set, zero value otherwise.
func (o *Evento) GetGvm() Gvm {
	if o == nil || o.Gvm == nil {
		var ret Gvm
		return ret
	}
	return *o.Gvm
}

// GetGvmOk returns a tuple with the Gvm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evento) GetGvmOk() (*Gvm, bool) {
	if o == nil || o.Gvm == nil {
		return nil, false
	}
	return o.Gvm, true
}

// HasGvm returns a boolean if a field has been set.
func (o *Evento) HasGvm() bool {
	if o != nil && o.Gvm != nil {
		return true
	}

	return false
}

// SetGvm gets a reference to the given Gvm and assigns it to the Gvm field.
func (o *Evento) SetGvm(v Gvm) {
	o.Gvm = &v
}

// GetTipoEvento returns the TipoEvento field value if set, zero value otherwise.
func (o *Evento) GetTipoEvento() TipoEvento {
	if o == nil || o.TipoEvento == nil {
		var ret TipoEvento
		return ret
	}
	return *o.TipoEvento
}

// GetTipoEventoOk returns a tuple with the TipoEvento field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evento) GetTipoEventoOk() (*TipoEvento, bool) {
	if o == nil || o.TipoEvento == nil {
		return nil, false
	}
	return o.TipoEvento, true
}

// HasTipoEvento returns a boolean if a field has been set.
func (o *Evento) HasTipoEvento() bool {
	if o != nil && o.TipoEvento != nil {
		return true
	}

	return false
}

// SetTipoEvento gets a reference to the given TipoEvento and assigns it to the TipoEvento field.
func (o *Evento) SetTipoEvento(v TipoEvento) {
	o.TipoEvento = &v
}

// GetCompartimento returns the Compartimento field value if set, zero value otherwise.
func (o *Evento) GetCompartimento() Compartimento {
	if o == nil || o.Compartimento == nil {
		var ret Compartimento
		return ret
	}
	return *o.Compartimento
}

// GetCompartimentoOk returns a tuple with the Compartimento field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evento) GetCompartimentoOk() (*Compartimento, bool) {
	if o == nil || o.Compartimento == nil {
		return nil, false
	}
	return o.Compartimento, true
}

// HasCompartimento returns a boolean if a field has been set.
func (o *Evento) HasCompartimento() bool {
	if o != nil && o.Compartimento != nil {
		return true
	}

	return false
}

// SetCompartimento gets a reference to the given Compartimento and assigns it to the Compartimento field.
func (o *Evento) SetCompartimento(v Compartimento) {
	o.Compartimento = &v
}

func (o Evento) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Upd.IsSet() {
		toSerialize["upd"] = o.Upd.Get()
	}
	if o.Usr.IsSet() {
		toSerialize["usr"] = o.Usr.Get()
	}
	if o.RefTipoEvento.IsSet() {
		toSerialize["refTipoEvento"] = o.RefTipoEvento.Get()
	}
	if o.RefCompartimento.IsSet() {
		toSerialize["refCompartimento"] = o.RefCompartimento.Get()
	}
	if o.Data.IsSet() {
		toSerialize["data"] = o.Data.Get()
	}
	if o.Mensagem.IsSet() {
		toSerialize["mensagem"] = o.Mensagem.Get()
	}
	if o.RefGvm.IsSet() {
		toSerialize["refGvm"] = o.RefGvm.Get()
	}
	if o.Gvm != nil {
		toSerialize["gvm"] = o.Gvm
	}
	if o.TipoEvento != nil {
		toSerialize["tipoEvento"] = o.TipoEvento
	}
	if o.Compartimento != nil {
		toSerialize["compartimento"] = o.Compartimento
	}
	return json.Marshal(toSerialize)
}

type NullableEvento struct {
	value *Evento
	isSet bool
}

func (v NullableEvento) Get() *Evento {
	return v.value
}

func (v *NullableEvento) Set(val *Evento) {
	v.value = val
	v.isSet = true
}

func (v NullableEvento) IsSet() bool {
	return v.isSet
}

func (v *NullableEvento) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvento(val *Evento) *NullableEvento {
	return &NullableEvento{value: val, isSet: true}
}

func (v NullableEvento) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvento) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


