/*
 * Petrolifera API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// GvmApiService GvmApi service
type GvmApiService service

type ApiGvmsGvmAlterarEstadoPostRequest struct {
	ctx _context.Context
	ApiService *GvmApiService
	refCompartimento *int64
	estado *EstadosCompartimentoEstado
}

func (r ApiGvmsGvmAlterarEstadoPostRequest) RefCompartimento(refCompartimento int64) ApiGvmsGvmAlterarEstadoPostRequest {
	r.refCompartimento = &refCompartimento
	return r
}
func (r ApiGvmsGvmAlterarEstadoPostRequest) Estado(estado EstadosCompartimentoEstado) ApiGvmsGvmAlterarEstadoPostRequest {
	r.estado = &estado
	return r
}

func (r ApiGvmsGvmAlterarEstadoPostRequest) Execute() (Resultado, *_nethttp.Response, error) {
	return r.ApiService.GvmsGvmAlterarEstadoPostExecute(r)
}

/*
 * GvmsGvmAlterarEstadoPost Method for GvmsGvmAlterarEstadoPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsGvmAlterarEstadoPostRequest
 */
func (a *GvmApiService) GvmsGvmAlterarEstadoPost(ctx _context.Context) ApiGvmsGvmAlterarEstadoPostRequest {
	return ApiGvmsGvmAlterarEstadoPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Resultado
 */
func (a *GvmApiService) GvmsGvmAlterarEstadoPostExecute(r ApiGvmsGvmAlterarEstadoPostRequest) (Resultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Resultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GvmApiService.GvmsGvmAlterarEstadoPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/Gvm/AlterarEstado"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.refCompartimento != nil {
		localVarQueryParams.Add("refCompartimento", parameterToString(*r.refCompartimento, ""))
	}
	if r.estado != nil {
		localVarQueryParams.Add("estado", parameterToString(*r.estado, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGvmsGvmDownloadImageGetRequest struct {
	ctx _context.Context
	ApiService *GvmApiService
	refProduto *int64
}

func (r ApiGvmsGvmDownloadImageGetRequest) RefProduto(refProduto int64) ApiGvmsGvmDownloadImageGetRequest {
	r.refProduto = &refProduto
	return r
}

func (r ApiGvmsGvmDownloadImageGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GvmsGvmDownloadImageGetExecute(r)
}

/*
 * GvmsGvmDownloadImageGet Method for GvmsGvmDownloadImageGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsGvmDownloadImageGetRequest
 */
func (a *GvmApiService) GvmsGvmDownloadImageGet(ctx _context.Context) ApiGvmsGvmDownloadImageGetRequest {
	return ApiGvmsGvmDownloadImageGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *GvmApiService) GvmsGvmDownloadImageGetExecute(r ApiGvmsGvmDownloadImageGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GvmApiService.GvmsGvmDownloadImageGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/Gvm/DownloadImage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.refProduto != nil {
		localVarQueryParams.Add("refProduto", parameterToString(*r.refProduto, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGvmsGvmFinalizarVendaGetRequest struct {
	ctx _context.Context
	ApiService *GvmApiService
	refVenda *int64
	refCompartimentoProduto *int64
	refCompartimentoVasilhame *int64
}

func (r ApiGvmsGvmFinalizarVendaGetRequest) RefVenda(refVenda int64) ApiGvmsGvmFinalizarVendaGetRequest {
	r.refVenda = &refVenda
	return r
}
func (r ApiGvmsGvmFinalizarVendaGetRequest) RefCompartimentoProduto(refCompartimentoProduto int64) ApiGvmsGvmFinalizarVendaGetRequest {
	r.refCompartimentoProduto = &refCompartimentoProduto
	return r
}
func (r ApiGvmsGvmFinalizarVendaGetRequest) RefCompartimentoVasilhame(refCompartimentoVasilhame int64) ApiGvmsGvmFinalizarVendaGetRequest {
	r.refCompartimentoVasilhame = &refCompartimentoVasilhame
	return r
}

func (r ApiGvmsGvmFinalizarVendaGetRequest) Execute() (Resultado, *_nethttp.Response, error) {
	return r.ApiService.GvmsGvmFinalizarVendaGetExecute(r)
}

/*
 * GvmsGvmFinalizarVendaGet Method for GvmsGvmFinalizarVendaGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsGvmFinalizarVendaGetRequest
 */
func (a *GvmApiService) GvmsGvmFinalizarVendaGet(ctx _context.Context) ApiGvmsGvmFinalizarVendaGetRequest {
	return ApiGvmsGvmFinalizarVendaGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Resultado
 */
func (a *GvmApiService) GvmsGvmFinalizarVendaGetExecute(r ApiGvmsGvmFinalizarVendaGetRequest) (Resultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Resultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GvmApiService.GvmsGvmFinalizarVendaGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/Gvm/FinalizarVenda"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.refVenda != nil {
		localVarQueryParams.Add("refVenda", parameterToString(*r.refVenda, ""))
	}
	if r.refCompartimentoProduto != nil {
		localVarQueryParams.Add("refCompartimentoProduto", parameterToString(*r.refCompartimentoProduto, ""))
	}
	if r.refCompartimentoVasilhame != nil {
		localVarQueryParams.Add("refCompartimentoVasilhame", parameterToString(*r.refCompartimentoVasilhame, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGvmsGvmGetGvmGetRequest struct {
	ctx _context.Context
	ApiService *GvmApiService
	identificadorPI *string
}

func (r ApiGvmsGvmGetGvmGetRequest) IdentificadorPI(identificadorPI string) ApiGvmsGvmGetGvmGetRequest {
	r.identificadorPI = &identificadorPI
	return r
}

func (r ApiGvmsGvmGetGvmGetRequest) Execute() (GvmDTOResultado, *_nethttp.Response, error) {
	return r.ApiService.GvmsGvmGetGvmGetExecute(r)
}

/*
 * GvmsGvmGetGvmGet Method for GvmsGvmGetGvmGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsGvmGetGvmGetRequest
 */
func (a *GvmApiService) GvmsGvmGetGvmGet(ctx _context.Context) ApiGvmsGvmGetGvmGetRequest {
	return ApiGvmsGvmGetGvmGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return GvmDTOResultado
 */
func (a *GvmApiService) GvmsGvmGetGvmGetExecute(r ApiGvmsGvmGetGvmGetRequest) (GvmDTOResultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GvmDTOResultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GvmApiService.GvmsGvmGetGvmGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/Gvm/GetGvm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.identificadorPI != nil {
		localVarQueryParams.Add("identificadorPI", parameterToString(*r.identificadorPI, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGvmsGvmGetVendaGetRequest struct {
	ctx _context.Context
	ApiService *GvmApiService
	tokenVenda *string
}

func (r ApiGvmsGvmGetVendaGetRequest) TokenVenda(tokenVenda string) ApiGvmsGvmGetVendaGetRequest {
	r.tokenVenda = &tokenVenda
	return r
}

func (r ApiGvmsGvmGetVendaGetRequest) Execute() (CustomVendaResultado, *_nethttp.Response, error) {
	return r.ApiService.GvmsGvmGetVendaGetExecute(r)
}

/*
 * GvmsGvmGetVendaGet Method for GvmsGvmGetVendaGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsGvmGetVendaGetRequest
 */
func (a *GvmApiService) GvmsGvmGetVendaGet(ctx _context.Context) ApiGvmsGvmGetVendaGetRequest {
	return ApiGvmsGvmGetVendaGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CustomVendaResultado
 */
func (a *GvmApiService) GvmsGvmGetVendaGetExecute(r ApiGvmsGvmGetVendaGetRequest) (CustomVendaResultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomVendaResultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GvmApiService.GvmsGvmGetVendaGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/Gvm/GetVenda"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tokenVenda != nil {
		localVarQueryParams.Add("tokenVenda", parameterToString(*r.tokenVenda, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGvmsGvmLoginPostRequest struct {
	ctx _context.Context
	ApiService *GvmApiService
	idendificadorPi *string
	password *string
}

func (r ApiGvmsGvmLoginPostRequest) IdendificadorPi(idendificadorPi string) ApiGvmsGvmLoginPostRequest {
	r.idendificadorPi = &idendificadorPi
	return r
}
func (r ApiGvmsGvmLoginPostRequest) Password(password string) ApiGvmsGvmLoginPostRequest {
	r.password = &password
	return r
}

func (r ApiGvmsGvmLoginPostRequest) Execute() (StringResultado, *_nethttp.Response, error) {
	return r.ApiService.GvmsGvmLoginPostExecute(r)
}

/*
 * GvmsGvmLoginPost Method for GvmsGvmLoginPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsGvmLoginPostRequest
 */
func (a *GvmApiService) GvmsGvmLoginPost(ctx _context.Context) ApiGvmsGvmLoginPostRequest {
	return ApiGvmsGvmLoginPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return StringResultado
 */
func (a *GvmApiService) GvmsGvmLoginPostExecute(r ApiGvmsGvmLoginPostRequest) (StringResultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StringResultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GvmApiService.GvmsGvmLoginPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/Gvm/Login"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.idendificadorPi != nil {
		localVarQueryParams.Add("idendificadorPi", parameterToString(*r.idendificadorPi, ""))
	}
	if r.password != nil {
		localVarQueryParams.Add("password", parameterToString(*r.password, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGvmsGvmRegistarEventoPostRequest struct {
	ctx _context.Context
	ApiService *GvmApiService
	tipoEvento *TiposTipoEvento
	msg *string
	refCompartimento *int64
}

func (r ApiGvmsGvmRegistarEventoPostRequest) TipoEvento(tipoEvento TiposTipoEvento) ApiGvmsGvmRegistarEventoPostRequest {
	r.tipoEvento = &tipoEvento
	return r
}
func (r ApiGvmsGvmRegistarEventoPostRequest) Msg(msg string) ApiGvmsGvmRegistarEventoPostRequest {
	r.msg = &msg
	return r
}
func (r ApiGvmsGvmRegistarEventoPostRequest) RefCompartimento(refCompartimento int64) ApiGvmsGvmRegistarEventoPostRequest {
	r.refCompartimento = &refCompartimento
	return r
}

func (r ApiGvmsGvmRegistarEventoPostRequest) Execute() (Resultado, *_nethttp.Response, error) {
	return r.ApiService.GvmsGvmRegistarEventoPostExecute(r)
}

/*
 * GvmsGvmRegistarEventoPost Method for GvmsGvmRegistarEventoPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsGvmRegistarEventoPostRequest
 */
func (a *GvmApiService) GvmsGvmRegistarEventoPost(ctx _context.Context) ApiGvmsGvmRegistarEventoPostRequest {
	return ApiGvmsGvmRegistarEventoPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Resultado
 */
func (a *GvmApiService) GvmsGvmRegistarEventoPostExecute(r ApiGvmsGvmRegistarEventoPostRequest) (Resultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Resultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GvmApiService.GvmsGvmRegistarEventoPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/Gvm/RegistarEvento"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tipoEvento != nil {
		localVarQueryParams.Add("tipoEvento", parameterToString(*r.tipoEvento, ""))
	}
	if r.msg != nil {
		localVarQueryParams.Add("msg", parameterToString(*r.msg, ""))
	}
	if r.refCompartimento != nil {
		localVarQueryParams.Add("refCompartimento", parameterToString(*r.refCompartimento, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGvmsGvmRegistarRaspberryPiPostRequest struct {
	ctx _context.Context
	ApiService *GvmApiService
	identificador *string
}

func (r ApiGvmsGvmRegistarRaspberryPiPostRequest) Identificador(identificador string) ApiGvmsGvmRegistarRaspberryPiPostRequest {
	r.identificador = &identificador
	return r
}

func (r ApiGvmsGvmRegistarRaspberryPiPostRequest) Execute() (Resultado, *_nethttp.Response, error) {
	return r.ApiService.GvmsGvmRegistarRaspberryPiPostExecute(r)
}

/*
 * GvmsGvmRegistarRaspberryPiPost Method for GvmsGvmRegistarRaspberryPiPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGvmsGvmRegistarRaspberryPiPostRequest
 */
func (a *GvmApiService) GvmsGvmRegistarRaspberryPiPost(ctx _context.Context) ApiGvmsGvmRegistarRaspberryPiPostRequest {
	return ApiGvmsGvmRegistarRaspberryPiPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Resultado
 */
func (a *GvmApiService) GvmsGvmRegistarRaspberryPiPostExecute(r ApiGvmsGvmRegistarRaspberryPiPostRequest) (Resultado, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Resultado
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GvmApiService.GvmsGvmRegistarRaspberryPiPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Gvms/Gvm/RegistarRaspberryPi"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.identificador != nil {
		localVarQueryParams.Add("identificador", parameterToString(*r.identificador, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
